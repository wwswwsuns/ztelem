/*************************************************************************************
 * Copyright (C) 2018-2020  ZTE Corporation.  All rights reserved.                   *
 *************************************************************************************
 * Description:                                                                      *
 *    This proto defines a schema for status and statistics of interfaces in device  *
 *                                                                                   *
 *************************************************************************************
 * Organization:                                                                     *
 *   ZTE Corporation                                                                 *
 *************************************************************************************
 * Contact:                                                                          *
 *    ZTE Corporation                                                                *
 *    Nanjing Institute of ZTE Corporation                                           *
 "    No.68 Zijinghua Rd. Yuhuatai District, Nanjing, China                          *
 *    Tel: +86-25-52870000                                                           *   
 *************************************************************************************
 * version:                                                                          *
 *    1st edition 2020-7-30                                                          *
 *************************************************************************************/
 
syntax = 'proto3';

option go_package = "ztelem/proto;proto";

package zte.telemetry.interfaces;

//接口上报信息
/************************************************************************************************
 * Description:                                                                                 *
 *    The following messages defines for interface's state data and statistic data.             *
 *                                                                                              *
 * Subscription info:                                                                           *
 *    sensor-path:  oc-if:interfaces/interface/state                                            *
 *    sensor-path:  oc-if:interfaces/interface/state/counters                                   *
 *    sensor-path:  oc-if:interfaces/interface/subinterfaces/subinterface/state                 *
 *    sensor-path:  oc-if:interfaces/interface/subinterfaces/subinterface/state/counters        *
 *    sensor-path:  oc-if:interfaces/interface/zte-if:state-period                              *
 ************************************************************************************************/
 
message InterfaceInfo {
    /* The name of this interface. */
    string name = 1;    //接口名称,Key field

    /* The state data for this interface. */
    repeated InterfaceState state = 2;    //父接口状态等属性上报信息

    /* The statistic of traffic on this interface. */
    repeated InterfaceCounters counters = 3;    //父接口计数上报信息

    /* The statistic of traffic on the subinterface. */
    repeated SubinterfaceInfo subinterface = 4;     //子接口上报信息

    /* The state-period data for this interface. */
    repeated StatePeriodInfo statePeriod = 5;     //父接口状态等属性定时上报信息

}

//子接口上报信息
/**************************************************************************************************
 * Description:                                                                                   *
 *    The following messages defines for sub interface's state data and statistic data.           *
 *                                                                                                *
 * Subscription info:                                                                             *
 *    sensor-path:    oc-if:interfaces/interface/subinterfaces/subinterface/state                 *
 *    sensor-path:    oc-if:interfaces/interface/subinterfaces/subinterface/state/counters        *
 *    sensor-path:    oc-if:interfaces/interface/subinterfaces/subinterface/zte-if:state-period   *  
 **************************************************************************************************/
 
message SubinterfaceInfo {
    /* The subport number of this subinterface. */
    uint32 sub_port = 1;    //子端口号,Key field

    /* The state data for this subinterface. */
    repeated SubinterfaceState state = 2;    //子接口状态等属性上报信息

    /* The statistic of traffic on the subinterface. */
    repeated SubinterfaceCounters counters = 3;    //子接口上报计数信息

    /* The sub-state-period data for this interface. */
    repeated SubStatePeriodInfo subStatePeriod = 4;     //子接口状态等属性定时上报信息
}

enum AdminStatus {
    ADMIN_STATUS_INVALID = 0;
    ADMIN_STATUS_UP = 1;
    ADMIN_STATUS_DOWN = 2;
    ADMIN_STATUS_TESTING = 3;
};

enum OperStatus {
    OPER_STATUS_INVALID = 0;
    OPER_STATUS_UP = 1;
    OPER_STATUS_DOWN = 2;
    OPER_STATUS_TESTING = 3;
    OPER_STATUS_UNKNOWN = 4;
    OPER_STATUS_DORMANT = 5;
    OPER_STATUS_NOT_PRESENT = 6;
    OPER_STATUS_LOWER_LAYER_DOWN = 7;
};

enum IPv4OperStatus {
    IPV4OPERSTATUS_STATUS_INVALID = 0;
    IPV4OPERSTATUS_STATUS_UP = 1;
    IPV4OPERSTATUS_STATUS_DOWN = 2;
};

enum IPv6OperStatus {
    IPV6OPERSTATUS_STATUS_INVALID = 0;
    IPV6OPERSTATUS_STATUS_UP = 1;
    IPV6OPERSTATUS_STATUS_DOWN = 2;
};

//父接口状态等属性上报信息
/*************************************************************************************
 * Description:                                                                      *
 *    The following messages defines for parent interface's state data.              *
 *                                                                                   *
 * Subscription info:                                                                *
 *    sensor-path:  oc-if:interfaces/interface/state                                 *
 *************************************************************************************/
 
message InterfaceState {
    /* The index of this interface. */
    uint32 ifindex = 1;    //接口索引

    /* The administrative state of this interface. */
    AdminStatus admin_status = 2;    //接口管理状态

    /* The current operational state of this interface. */
    OperStatus oper_status = 3;    //接口操作状态

    /* This timestamp indicates the absolute time of the last state change of the interface (e.g., up-to-down transition). */
    uint64 last_change = 4;    //上一次状态发生变化时间

    /* When set to true, the interface is a logical interface which does not have an associated physical port or channel on the system. */
    bool logical = 5;    //是否为逻辑口

    /* The type of this interface. */
    uint32 type = 6;    //接口封装类型

    enum PhyStatus {
        PHY_STATUS_INVALID = 0;
        PHY_STATUS_UP = 1;
        PHY_STATUS_DOWN = 2;
    };
    /* The physical state of this interface. */
    PhyStatus phy_status =7;    //接口物理状态

    /* The current IPv4 protocol operational state of this interface. */
    IPv4OperStatus ipv4_oper_status =8;    //接口v4状态
}

//子接口状态等属性上报信息
/*******************************************************************************************
 * Description:                                                                            *
 *    The following messages defines for sub interface's state data.                       *
 *                                                                                         *
 * Subscription info:                                                                      *
 *    sensor-path:  oc-if:interfaces/interface/subinterfaces/subinterface/state            *
 *******************************************************************************************/
 
message SubinterfaceState {
    /* The index of this interface. */
    uint32 ifindex = 1;    //接口索引

    /* The administrative state of this interface. */
    AdminStatus admin_status = 2;    //接口管理状态

    /* The current operational state of this interface. */
    OperStatus oper_status = 3;    //接口操作状态

    /* This timestamp indicates the absolute time of the last state change of the interface (e.g., up-to-down transition). */
    uint64 last_change = 4;    //上一次状态发生变化时间

    /* When set to true, the interface is a logical interface which does not have an associated physical port or channel on the system. */
    bool logical = 5;    //是否为逻辑口

    /* The current IPv4 protocol operational state of this interface. */
    IPv4OperStatus ipv4_oper_status =6;    //接口v4状态
}

//父接口计数上报信息
/*************************************************************************************
 * Description:                                                                      *
 *    The following messages defines for parent interface's statistic data.          *
 *                                                                                   *
 * Subscription info:                                                                *
 *    sensor-path:  oc-if:interfaces/interface/state/counters                        *
 *************************************************************************************/
message InterfaceCounters {
    /* The total number of octets received on the interface, including framing characters. */
    uint64 in_octets = 1;    //接收字节数

    /* The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were not addressed to a multicast or broadcast address at this sub-layer. */
    uint64 in_unicast_pkts = 2;    //接收单播帧数

    /* The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a broadcast address at this sub-layer. */
    uint64 in_broadcast_pkts = 3;    //接收广播帧数

    /* The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a multicast address at this sub-layer. For a MAC-layer protocol, this includes both Group and Functional addresses. */
    uint64 in_multicast_pkts = 4;    //接收组播帧数

    /* The number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. */
    uint64 in_discards = 5;     //接收丢弃帧数

    /* For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol. */
    uint64 in_errors = 6;    //接收错误帧数

    /* For packet-oriented interfaces, the number of packets received via the interface that were discarded because of an unknown or unsupported protocol. For character-oriented or fixed-length interfaces that support protocol multiplexing, the number of transmission units received via the interface that were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter is not present. */
    uint64 in_unknown_protos = 7;    //接收未知协议帧数

    /* Number of received packets which had errors in the frame check sequence (FCS), i.e., framing errors. */
    uint64 in_fcs_errors = 8;    //接收fcs校验错帧数

    /* The total number of octets transmitted out of the interface, including framing characters. */
    uint64 out_octets = 9;    //发送字节数

    /* The total number of packets that higher-level protocols requested be transmitted, and that were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent. */
    uint64 out_unicast_pkts = 10;    //发送单播帧数

    /* The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent. */
    uint64 out_broadcast_pkts = 11;   //发送广播帧数

    /* The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC-layer protocol, this includes both Group and Functional addresses. */
    uint64 out_multicast_pkts = 12;    //发送组播帧数

    /* The number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. */
    uint64 out_discards = 13;    //发送丢弃帧数

    /* For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors. */
    uint64 out_errors = 14;    //发送错误帧数

    /* Number of times the interface state has transitioned between up and down since the time the device restarted or the last-clear time, whichever is most recent. */
    uint64 carrier_transitions = 15;    //状态变化次数

    /* Timestamp of the last time the interface counters were cleared. */
    uint64 last_clear = 16;    //上一次统计清除时间

    /* The total number of packets received on the interface, including all unicast, multicast, broadcast and bad packets etc. */
    uint64 in_pkts = 17;    //接收帧数

    /* The total number of packets transmitted out of the interface, including all unicast, multicast, broadcast, and bad packets etc. */
    uint64 out_pkts = 18;    //发送帧数

    /* The input utilization of bandwidith. */
    float input_utilization = 19;    //接收方向带宽利用率,Unit:1/10000

    /* The output utilization of bandwidith. */
    float output_utilization = 20;    //发送方向带宽利用率,Unit:1/10000

    /* The input traffic rate(unit:Mbps). */
    float in_traffic_rate = 21;    //接收流量速率,Unit:Mbps

    /* The input packet rate(unit:Kfps). */
    float in_packet_rate = 22;    //接收帧速率,Unit:Kfps

    /* The output traffic rate(unit:Mbps). */
    float out_traffic_rate = 23;    //发送流量速率,Unit:Mbps

    /* The output packet rate(unit:Kfps). */
    float out_packet_rate = 24;    //发送帧速率,Unit:Kfps

    /* The total number of v4 octets received on the interface. */
    uint64 in_v4_octets = 25;    //接收ipv4字节数

    /* The total number of v4 octets sent on the interface. */
    uint64 out_v4_octets = 26;    //发送ipv4字节数

    /* Total v4 packets received. */
    uint64 in_v4_pkts = 27;     //接收ipv4帧数

    /* Total v4 packets sent. */
    uint64 out_v4_pkts = 28;    //发送ipv4帧数

    /* The total number of v6 octets received on the interface. */
    uint64 in_v6_octets = 29;    //接收ipv6字节数

    /* The total number of v6 octets sent on the interface. */
    uint64 out_v6_octets = 30;    //发送ipv6字节数

    /* Total v6 packets received. */
    uint64 in_v6_pkts = 31;    //接收ipv6帧数

    /* Total v6 packets sent. */
    uint64 out_v6_pkts = 32;    //发送ipv6帧数

    /* The input v4 traffic rate(unit:Mbps). */
    float in_v4_traffic_rate = 33;    //接收v4流量速率,Unit:Mbps

    /* The input v4 packet rate(unit:Kfps). */
    float in_v4_packet_rate = 34;    //接收v4帧速率,Unit:Kfps

    /* The output v4 traffic rate(unit:Mbps). */
    float out_v4_traffic_rate = 35;    //发送v4流量速率,Unit:Mbps

    /* The output v4 packet rate(unit:Kfps). */
    float out_v4_packet_rate = 36;    //发送v4帧速率,Unit:Kfps

    /* The input v6 traffic rate(unit:Mbps). */
    float in_v6_traffic_rate = 37;    //接收v6流量速率,Unit:Mbps

    /* The input v6 packet rate(unit:Kfps). */
    float in_v6_packet_rate = 38;    //接收v6帧速率,Unit:Kfps

    /* The output v6 traffic rate(unit:Mbps). */
    float out_v6_traffic_rate = 39;    //发送v6流量速率,Unit:Mbps

    /* The output v6 packet rate(unit:Kfps). */
    float out_v6_packet_rate = 40;    //发送v6帧速率,Unit:Kfps

    /* The input v4 utilization of bandwidith. */
    float input_v4_utilization = 41;    //接收方向v4带宽利用率,Unit:1/10000

    /* The output v4 utilization of bandwidith. */
    float output_v4_utilization = 42;    //发送方向v4带宽利用率,Unit:1/10000

    /* The input v6 utilization of bandwidith. */
    float input_v6_utilization = 43;    //接收方向v6带宽利用率,Unit:1/10000

    /* The output v6 utilization of bandwidith. */
    float output_v6_utilization = 44;    //发送方向v6带宽利用率,Unit:1/10000

    /* The total number of bier octets received on the interface. */
    uint64 in_bier_octets = 45;    //接收bier报文字节数

    /* Total bier packets received. */
    uint64 in_bier_pkts = 46;    //接收bier报文帧数

    /* The total number of bier octets sent on the interface. */
    uint64 out_bier_octets = 47;    //发送bier报文字节数

    /* Total bier packets sent. */
    uint64 out_bier_pkts = 48;    //发送bier报文帧数
}


//子接口上报计数信息
/*******************************************************************************************
 * Description:                                                                            *
 *    The following messages defines for sub interface's statistic data.                   *
 *                                                                                         *
 * Subscription info:                                                                      *
 *    sensor-path:  oc-if:interfaces/interface/subinterfaces/subinterface/state/counters   *
 *******************************************************************************************/
 
message SubinterfaceCounters {
    /* The total number of octets received on the interface, including framing characters. */
    uint64 in_octets = 1;    //接收字节数

    /* The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were not addressed to a multicast or broadcast address at this sub-layer. */
    uint64 in_unicast_pkts = 2;    //接收单播帧数

    /* The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a broadcast address at this sub-layer. */
    uint64 in_broadcast_pkts = 3;    //接收广播帧数

    /* The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a multicast address at this sub-layer. For a MAC-layer protocol, this includes both Group and Functional addresses. */
    uint64 in_multicast_pkts = 4;    //接收组播帧数

    /* The number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. */
    uint64 in_discards = 5;     //接收丢弃帧数

    /* For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol. */
    uint64 in_errors = 6;    //接收错误帧数

    /* For packet-oriented interfaces, the number of packets received via the interface that were discarded because of an unknown or unsupported protocol. For character-oriented or fixed-length interfaces that support protocol multiplexing, the number of transmission units received via the interface that were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter is not present. */
    uint64 in_unknown_protos = 7;    //接收未知协议帧数

    /* Number of received packets which had errors in the frame check sequence (FCS), i.e., framing errors. */
    uint64 in_fcs_errors = 8;    //接收fcs校验错帧数

    /* The total number of octets transmitted out of the interface, including framing characters. */
    uint64 out_octets = 9;    //发送字节数

    /* The total number of packets that higher-level protocols requested be transmitted, and that were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent. */
    uint64 out_unicast_pkts = 10;    //发送单播帧数

    /* The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent. */
    uint64 out_broadcast_pkts = 11;   //发送广播帧数

    /* The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC-layer protocol, this includes both Group and Functional addresses. */
    uint64 out_multicast_pkts = 12;    //发送组播帧数

    /* The number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. */
    uint64 out_discards = 13;    //发送丢弃帧数

    /* For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors. */
    uint64 out_errors = 14;    //发送错误帧数

    /* Number of times the interface state has transitioned between up and down since the time the device restarted or the last-clear time, whichever is most recent. */
    uint64 carrier_transitions = 15;    //状态变化次数

    /* Timestamp of the last time the interface counters were cleared. */
    uint64 last_clear = 16;    //上一次统计清除时间

    /* The total number of packets received on the interface, including all unicast, multicast, broadcast and bad packets etc. */
    uint64 in_pkts = 17;    //接收帧数

    /* The total number of packets transmitted out of the interface, including all unicast, multicast, broadcast, and bad packets etc. */
    uint64 out_pkts = 18;    //发送帧数

    /* The input utilization of bandwidith. */
    float input_utilization = 19;    //接收方向带宽利用率,Unit:1/10000

    /* The output utilization of bandwidith. */
    float output_utilization = 20;    //发送方向带宽利用率,Unit:1/10000

    /* The input traffic rate(unit:Mbps). */
    float in_traffic_rate = 21;    //接收流量速率,Unit:Mbps

    /* The input packet rate(unit:Kfps). */
    float in_packet_rate = 22;    //接收帧速率,Unit:Kfps

    /* The output traffic rate(unit:Mbps). */
    float out_traffic_rate = 23;    //发送流量速率,Unit:Mbps

    /* The output packet rate(unit:Kfps). */
    float out_packet_rate = 24;    //发送帧速率,Unit:Kfps

    /* The total number of v4 octets received on the interface. */
    uint64 in_v4_octets = 25;    //接收ipv4字节数

    /* The total number of v4 octets sent on the interface. */
    uint64 out_v4_octets = 26;    //发送ipv4字节数

    /* Total v4 packets received. */
    uint64 in_v4_pkts = 27;     //接收ipv4帧数

    /* Total v4 packets sent. */
    uint64 out_v4_pkts = 28;    //发送ipv4帧数

    /* The total number of v6 octets received on the interface. */
    uint64 in_v6_octets = 29;    //接收ipv6字节数

    /* The total number of v6 octets sent on the interface. */
    uint64 out_v6_octets = 30;    //发送ipv6字节数

    /* Total v6 packets received. */
    uint64 in_v6_pkts = 31;    //接收ipv6帧数

    /* Total v6 packets sent. */
    uint64 out_v6_pkts = 32;    //发送ipv6帧数

    /* The input v4 traffic rate(unit:Mbps). */
    float in_v4_traffic_rate = 33;    //接收v4流量速率,Unit:Mbps

    /* The input v4 packet rate(unit:Kfps). */
    float in_v4_packet_rate = 34;    //接收v4帧速率,Unit:Kfps

    /* The output v4 traffic rate(unit:Mbps). */
    float out_v4_traffic_rate = 35;    //发送v4流量速率,Unit:Mbps

    /* The output v4 packet rate(unit:Kfps). */
    float out_v4_packet_rate = 36;    //发送v4帧速率,Unit:Kfps

    /* The input v6 traffic rate(unit:Mbps). */
    float in_v6_traffic_rate = 37;    //接收v6流量速率,Unit:Mbps

    /* The input v6 packet rate(unit:Kfps). */
    float in_v6_packet_rate = 38;    //接收v6帧速率,Unit:Kfps

    /* The output v6 traffic rate(unit:Mbps). */
    float out_v6_traffic_rate = 39;    //发送v6流量速率,Unit:Mbps

    /* The output v6 packet rate(unit:Kfps). */
    float out_v6_packet_rate = 40;    //发送v6帧速率,Unit:Kfps

    /* The input v4 utilization of bandwidith. */
    float input_v4_utilization = 41;    //接收方向v4带宽利用率,Unit:1/10000

    /* The output v4 utilization of bandwidith. */
    float output_v4_utilization = 42;    //发送方向v4带宽利用率,Unit:1/10000

    /* The input v6 utilization of bandwidith. */
    float input_v6_utilization = 43;    //接收方向v6带宽利用率,Unit:1/10000

    /* The output v6 utilization of bandwidith. */
    float output_v6_utilization = 44;    //发送方向v6带宽利用率,Unit:1/10000

    /* The total number of bier octets received on the interface. */
    uint64 in_bier_octets = 45;    //接收bier报文字节数

    /* Total bier packets received. */
    uint64 in_bier_pkts = 46;    //接收bier报文帧数

    /* The total number of bier octets sent on the interface. */
    uint64 out_bier_octets = 47;    //发送bier报文字节数

    /* Total bier packets sent. */
    uint64 out_bier_pkts = 48;    //发送bier报文帧数
}

//父接口状态等属性定时上报信息
/*************************************************************************************
 * Description:                                                                      *
 *    The following messages defines for parent interface's state-period data.              *
 *                                                                                   *
 * Subscription info:                                                                *
 *    sensor-path:  oc-if:interfaces/interface/zte-if:state-period                                 *
 *************************************************************************************/
 
message StatePeriodInfo {
    /* The type of this interface. */
    uint32 type = 1;    //接口封装类型

    /* The index of this interface. */
    uint32 ifindex = 2;    //接口索引

    /* The administrative state of this interface. */
    AdminStatus admin_status = 3;    //接口管理状态

    /* The current operational state of this interface. */
    OperStatus oper_status = 4;    //接口操作状态

    enum PhyStatus {
        PHY_STATUS_INVALID = 0;
        PHY_STATUS_UP = 1;
        PHY_STATUS_DOWN = 2;
    };

    /* The physical state of this interface. */
    PhyStatus phy_status = 5;    //接口物理状态

    /* The current IPv4 protocol operational state of this interface. */
    IPv4OperStatus ipv4_oper_status = 6;    //接口v4状态

    /* The current IPv6 protocol operational state of this interface. */
    IPv6OperStatus ipv6_oper_status = 7;    //接口v6状态
}

//子接口状态等属性定时上报信息
/***********************************************************************************************
 * Description:                                                                                *
 *    The following messages defines for sub interface's state-period data.                    *
 *                                                                                             *
 * Subscription info:                                                                          *
 *    sensor-path:  oc-if:interfaces/interface/subinterfaces/subinterface/zte-if:state-period  *
 ***********************************************************************************************/
 
message SubStatePeriodInfo {

    /* The index of this interface. */
    uint32 ifindex = 1;    //接口索引

    /* The administrative state of this interface. */
    AdminStatus admin_status = 2;    //接口管理状态

    /* The current operational state of this interface. */
    OperStatus oper_status = 3;    //接口操作状态

    enum PhyStatus {
        PHY_STATUS_INVALID = 0;
        PHY_STATUS_UP = 1;
        PHY_STATUS_DOWN = 2;
    };

    /* The physical state of this interface. */
    PhyStatus phy_status = 4;    //接口物理状态

    /* The current IPv4 protocol operational state of this interface. */
    IPv4OperStatus ipv4_oper_status = 5;    //接口v4状态

    /* The current IPv6 protocol operational state of this interface. */
    IPv6OperStatus ipv6_oper_status = 6;    //接口v6状态
}
