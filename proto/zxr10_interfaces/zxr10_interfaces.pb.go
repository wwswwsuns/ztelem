//************************************************************************************
// Copyright (C) 2018-2020  ZTE Corporation.  All rights reserved.                   *
//************************************************************************************
// Description:                                                                      *
//    This proto defines a schema for status and statistics of interfaces in device  *
//                                                                                   *
//************************************************************************************
// Organization:                                                                     *
//   ZTE Corporation                                                                 *
//************************************************************************************
// Contact:                                                                          *
//    ZTE Corporation                                                                *
//    Nanjing Institute of ZTE Corporation                                           *
//"    No.68 Zijinghua Rd. Yuhuatai District, Nanjing, China                          *
//    Tel: +86-25-52870000                                                           *
//************************************************************************************
// version:                                                                          *
//    1st edition 2020-7-30                                                          *
//***********************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.32.0
// source: zxr10_interfaces/zxr10_interfaces.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdminStatus int32

const (
	AdminStatus_ADMIN_STATUS_INVALID AdminStatus = 0
	AdminStatus_ADMIN_STATUS_UP      AdminStatus = 1
	AdminStatus_ADMIN_STATUS_DOWN    AdminStatus = 2
	AdminStatus_ADMIN_STATUS_TESTING AdminStatus = 3
)

// Enum value maps for AdminStatus.
var (
	AdminStatus_name = map[int32]string{
		0: "ADMIN_STATUS_INVALID",
		1: "ADMIN_STATUS_UP",
		2: "ADMIN_STATUS_DOWN",
		3: "ADMIN_STATUS_TESTING",
	}
	AdminStatus_value = map[string]int32{
		"ADMIN_STATUS_INVALID": 0,
		"ADMIN_STATUS_UP":      1,
		"ADMIN_STATUS_DOWN":    2,
		"ADMIN_STATUS_TESTING": 3,
	}
)

func (x AdminStatus) Enum() *AdminStatus {
	p := new(AdminStatus)
	*p = x
	return p
}

func (x AdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[0].Descriptor()
}

func (AdminStatus) Type() protoreflect.EnumType {
	return &file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[0]
}

func (x AdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminStatus.Descriptor instead.
func (AdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{0}
}

type OperStatus int32

const (
	OperStatus_OPER_STATUS_INVALID          OperStatus = 0
	OperStatus_OPER_STATUS_UP               OperStatus = 1
	OperStatus_OPER_STATUS_DOWN             OperStatus = 2
	OperStatus_OPER_STATUS_TESTING          OperStatus = 3
	OperStatus_OPER_STATUS_UNKNOWN          OperStatus = 4
	OperStatus_OPER_STATUS_DORMANT          OperStatus = 5
	OperStatus_OPER_STATUS_NOT_PRESENT      OperStatus = 6
	OperStatus_OPER_STATUS_LOWER_LAYER_DOWN OperStatus = 7
)

// Enum value maps for OperStatus.
var (
	OperStatus_name = map[int32]string{
		0: "OPER_STATUS_INVALID",
		1: "OPER_STATUS_UP",
		2: "OPER_STATUS_DOWN",
		3: "OPER_STATUS_TESTING",
		4: "OPER_STATUS_UNKNOWN",
		5: "OPER_STATUS_DORMANT",
		6: "OPER_STATUS_NOT_PRESENT",
		7: "OPER_STATUS_LOWER_LAYER_DOWN",
	}
	OperStatus_value = map[string]int32{
		"OPER_STATUS_INVALID":          0,
		"OPER_STATUS_UP":               1,
		"OPER_STATUS_DOWN":             2,
		"OPER_STATUS_TESTING":          3,
		"OPER_STATUS_UNKNOWN":          4,
		"OPER_STATUS_DORMANT":          5,
		"OPER_STATUS_NOT_PRESENT":      6,
		"OPER_STATUS_LOWER_LAYER_DOWN": 7,
	}
)

func (x OperStatus) Enum() *OperStatus {
	p := new(OperStatus)
	*p = x
	return p
}

func (x OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[1].Descriptor()
}

func (OperStatus) Type() protoreflect.EnumType {
	return &file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[1]
}

func (x OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperStatus.Descriptor instead.
func (OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{1}
}

type IPv4OperStatus int32

const (
	IPv4OperStatus_IPV4OPERSTATUS_STATUS_INVALID IPv4OperStatus = 0
	IPv4OperStatus_IPV4OPERSTATUS_STATUS_UP      IPv4OperStatus = 1
	IPv4OperStatus_IPV4OPERSTATUS_STATUS_DOWN    IPv4OperStatus = 2
)

// Enum value maps for IPv4OperStatus.
var (
	IPv4OperStatus_name = map[int32]string{
		0: "IPV4OPERSTATUS_STATUS_INVALID",
		1: "IPV4OPERSTATUS_STATUS_UP",
		2: "IPV4OPERSTATUS_STATUS_DOWN",
	}
	IPv4OperStatus_value = map[string]int32{
		"IPV4OPERSTATUS_STATUS_INVALID": 0,
		"IPV4OPERSTATUS_STATUS_UP":      1,
		"IPV4OPERSTATUS_STATUS_DOWN":    2,
	}
)

func (x IPv4OperStatus) Enum() *IPv4OperStatus {
	p := new(IPv4OperStatus)
	*p = x
	return p
}

func (x IPv4OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPv4OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[2].Descriptor()
}

func (IPv4OperStatus) Type() protoreflect.EnumType {
	return &file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[2]
}

func (x IPv4OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPv4OperStatus.Descriptor instead.
func (IPv4OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{2}
}

type IPv6OperStatus int32

const (
	IPv6OperStatus_IPV6OPERSTATUS_STATUS_INVALID IPv6OperStatus = 0
	IPv6OperStatus_IPV6OPERSTATUS_STATUS_UP      IPv6OperStatus = 1
	IPv6OperStatus_IPV6OPERSTATUS_STATUS_DOWN    IPv6OperStatus = 2
)

// Enum value maps for IPv6OperStatus.
var (
	IPv6OperStatus_name = map[int32]string{
		0: "IPV6OPERSTATUS_STATUS_INVALID",
		1: "IPV6OPERSTATUS_STATUS_UP",
		2: "IPV6OPERSTATUS_STATUS_DOWN",
	}
	IPv6OperStatus_value = map[string]int32{
		"IPV6OPERSTATUS_STATUS_INVALID": 0,
		"IPV6OPERSTATUS_STATUS_UP":      1,
		"IPV6OPERSTATUS_STATUS_DOWN":    2,
	}
)

func (x IPv6OperStatus) Enum() *IPv6OperStatus {
	p := new(IPv6OperStatus)
	*p = x
	return p
}

func (x IPv6OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPv6OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[3].Descriptor()
}

func (IPv6OperStatus) Type() protoreflect.EnumType {
	return &file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[3]
}

func (x IPv6OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPv6OperStatus.Descriptor instead.
func (IPv6OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{3}
}

type InterfaceState_PhyStatus int32

const (
	InterfaceState_PHY_STATUS_INVALID InterfaceState_PhyStatus = 0
	InterfaceState_PHY_STATUS_UP      InterfaceState_PhyStatus = 1
	InterfaceState_PHY_STATUS_DOWN    InterfaceState_PhyStatus = 2
)

// Enum value maps for InterfaceState_PhyStatus.
var (
	InterfaceState_PhyStatus_name = map[int32]string{
		0: "PHY_STATUS_INVALID",
		1: "PHY_STATUS_UP",
		2: "PHY_STATUS_DOWN",
	}
	InterfaceState_PhyStatus_value = map[string]int32{
		"PHY_STATUS_INVALID": 0,
		"PHY_STATUS_UP":      1,
		"PHY_STATUS_DOWN":    2,
	}
)

func (x InterfaceState_PhyStatus) Enum() *InterfaceState_PhyStatus {
	p := new(InterfaceState_PhyStatus)
	*p = x
	return p
}

func (x InterfaceState_PhyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceState_PhyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[4].Descriptor()
}

func (InterfaceState_PhyStatus) Type() protoreflect.EnumType {
	return &file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[4]
}

func (x InterfaceState_PhyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceState_PhyStatus.Descriptor instead.
func (InterfaceState_PhyStatus) EnumDescriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{2, 0}
}

type StatePeriodInfo_PhyStatus int32

const (
	StatePeriodInfo_PHY_STATUS_INVALID StatePeriodInfo_PhyStatus = 0
	StatePeriodInfo_PHY_STATUS_UP      StatePeriodInfo_PhyStatus = 1
	StatePeriodInfo_PHY_STATUS_DOWN    StatePeriodInfo_PhyStatus = 2
)

// Enum value maps for StatePeriodInfo_PhyStatus.
var (
	StatePeriodInfo_PhyStatus_name = map[int32]string{
		0: "PHY_STATUS_INVALID",
		1: "PHY_STATUS_UP",
		2: "PHY_STATUS_DOWN",
	}
	StatePeriodInfo_PhyStatus_value = map[string]int32{
		"PHY_STATUS_INVALID": 0,
		"PHY_STATUS_UP":      1,
		"PHY_STATUS_DOWN":    2,
	}
)

func (x StatePeriodInfo_PhyStatus) Enum() *StatePeriodInfo_PhyStatus {
	p := new(StatePeriodInfo_PhyStatus)
	*p = x
	return p
}

func (x StatePeriodInfo_PhyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatePeriodInfo_PhyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[5].Descriptor()
}

func (StatePeriodInfo_PhyStatus) Type() protoreflect.EnumType {
	return &file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[5]
}

func (x StatePeriodInfo_PhyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatePeriodInfo_PhyStatus.Descriptor instead.
func (StatePeriodInfo_PhyStatus) EnumDescriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{6, 0}
}

type SubStatePeriodInfo_PhyStatus int32

const (
	SubStatePeriodInfo_PHY_STATUS_INVALID SubStatePeriodInfo_PhyStatus = 0
	SubStatePeriodInfo_PHY_STATUS_UP      SubStatePeriodInfo_PhyStatus = 1
	SubStatePeriodInfo_PHY_STATUS_DOWN    SubStatePeriodInfo_PhyStatus = 2
)

// Enum value maps for SubStatePeriodInfo_PhyStatus.
var (
	SubStatePeriodInfo_PhyStatus_name = map[int32]string{
		0: "PHY_STATUS_INVALID",
		1: "PHY_STATUS_UP",
		2: "PHY_STATUS_DOWN",
	}
	SubStatePeriodInfo_PhyStatus_value = map[string]int32{
		"PHY_STATUS_INVALID": 0,
		"PHY_STATUS_UP":      1,
		"PHY_STATUS_DOWN":    2,
	}
)

func (x SubStatePeriodInfo_PhyStatus) Enum() *SubStatePeriodInfo_PhyStatus {
	p := new(SubStatePeriodInfo_PhyStatus)
	*p = x
	return p
}

func (x SubStatePeriodInfo_PhyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubStatePeriodInfo_PhyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[6].Descriptor()
}

func (SubStatePeriodInfo_PhyStatus) Type() protoreflect.EnumType {
	return &file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes[6]
}

func (x SubStatePeriodInfo_PhyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubStatePeriodInfo_PhyStatus.Descriptor instead.
func (SubStatePeriodInfo_PhyStatus) EnumDescriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{7, 0}
}

type InterfaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this interface.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` //接口名称,Key field
	// The state data for this interface.
	State []*InterfaceState `protobuf:"bytes,2,rep,name=state,proto3" json:"state,omitempty"` //父接口状态等属性上报信息
	// The statistic of traffic on this interface.
	Counters []*InterfaceCounters `protobuf:"bytes,3,rep,name=counters,proto3" json:"counters,omitempty"` //父接口计数上报信息
	// The statistic of traffic on the subinterface.
	Subinterface []*SubinterfaceInfo `protobuf:"bytes,4,rep,name=subinterface,proto3" json:"subinterface,omitempty"` //子接口上报信息
	// The state-period data for this interface.
	StatePeriod []*StatePeriodInfo `protobuf:"bytes,5,rep,name=statePeriod,proto3" json:"statePeriod,omitempty"` //父接口状态等属性定时上报信息
}

func (x *InterfaceInfo) Reset() {
	*x = InterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInfo) ProtoMessage() {}

func (x *InterfaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInfo.ProtoReflect.Descriptor instead.
func (*InterfaceInfo) Descriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{0}
}

func (x *InterfaceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceInfo) GetState() []*InterfaceState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InterfaceInfo) GetCounters() []*InterfaceCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *InterfaceInfo) GetSubinterface() []*SubinterfaceInfo {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

func (x *InterfaceInfo) GetStatePeriod() []*StatePeriodInfo {
	if x != nil {
		return x.StatePeriod
	}
	return nil
}

type SubinterfaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subport number of this subinterface.
	SubPort uint32 `protobuf:"varint,1,opt,name=sub_port,json=subPort,proto3" json:"sub_port,omitempty"` //子端口号,Key field
	// The state data for this subinterface.
	State []*SubinterfaceState `protobuf:"bytes,2,rep,name=state,proto3" json:"state,omitempty"` //子接口状态等属性上报信息
	// The statistic of traffic on the subinterface.
	Counters []*SubinterfaceCounters `protobuf:"bytes,3,rep,name=counters,proto3" json:"counters,omitempty"` //子接口上报计数信息
	// The sub-state-period data for this interface.
	SubStatePeriod []*SubStatePeriodInfo `protobuf:"bytes,4,rep,name=subStatePeriod,proto3" json:"subStatePeriod,omitempty"` //子接口状态等属性定时上报信息
}

func (x *SubinterfaceInfo) Reset() {
	*x = SubinterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubinterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubinterfaceInfo) ProtoMessage() {}

func (x *SubinterfaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubinterfaceInfo.ProtoReflect.Descriptor instead.
func (*SubinterfaceInfo) Descriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{1}
}

func (x *SubinterfaceInfo) GetSubPort() uint32 {
	if x != nil {
		return x.SubPort
	}
	return 0
}

func (x *SubinterfaceInfo) GetState() []*SubinterfaceState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SubinterfaceInfo) GetCounters() []*SubinterfaceCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *SubinterfaceInfo) GetSubStatePeriod() []*SubStatePeriodInfo {
	if x != nil {
		return x.SubStatePeriod
	}
	return nil
}

type InterfaceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of this interface.
	Ifindex uint32 `protobuf:"varint,1,opt,name=ifindex,proto3" json:"ifindex,omitempty"` //接口索引
	// The administrative state of this interface.
	AdminStatus AdminStatus `protobuf:"varint,2,opt,name=admin_status,json=adminStatus,proto3,enum=zte.telemetry.interfaces.AdminStatus" json:"admin_status,omitempty"` //接口管理状态
	// The current operational state of this interface.
	OperStatus OperStatus `protobuf:"varint,3,opt,name=oper_status,json=operStatus,proto3,enum=zte.telemetry.interfaces.OperStatus" json:"oper_status,omitempty"` //接口操作状态
	// This timestamp indicates the absolute time of the last state change of the interface (e.g., up-to-down transition).
	LastChange uint64 `protobuf:"varint,4,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"` //上一次状态发生变化时间
	// When set to true, the interface is a logical interface which does not have an associated physical port or channel on the system.
	Logical bool `protobuf:"varint,5,opt,name=logical,proto3" json:"logical,omitempty"` //是否为逻辑口
	// The type of this interface.
	Type uint32 `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"` //接口封装类型
	// The physical state of this interface.
	PhyStatus InterfaceState_PhyStatus `protobuf:"varint,7,opt,name=phy_status,json=phyStatus,proto3,enum=zte.telemetry.interfaces.InterfaceState_PhyStatus" json:"phy_status,omitempty"` //接口物理状态
	// The current IPv4 protocol operational state of this interface.
	Ipv4OperStatus IPv4OperStatus `protobuf:"varint,8,opt,name=ipv4_oper_status,json=ipv4OperStatus,proto3,enum=zte.telemetry.interfaces.IPv4OperStatus" json:"ipv4_oper_status,omitempty"` //接口v4状态
}

func (x *InterfaceState) Reset() {
	*x = InterfaceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceState) ProtoMessage() {}

func (x *InterfaceState) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceState.ProtoReflect.Descriptor instead.
func (*InterfaceState) Descriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{2}
}

func (x *InterfaceState) GetIfindex() uint32 {
	if x != nil {
		return x.Ifindex
	}
	return 0
}

func (x *InterfaceState) GetAdminStatus() AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return AdminStatus_ADMIN_STATUS_INVALID
}

func (x *InterfaceState) GetOperStatus() OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return OperStatus_OPER_STATUS_INVALID
}

func (x *InterfaceState) GetLastChange() uint64 {
	if x != nil {
		return x.LastChange
	}
	return 0
}

func (x *InterfaceState) GetLogical() bool {
	if x != nil {
		return x.Logical
	}
	return false
}

func (x *InterfaceState) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *InterfaceState) GetPhyStatus() InterfaceState_PhyStatus {
	if x != nil {
		return x.PhyStatus
	}
	return InterfaceState_PHY_STATUS_INVALID
}

func (x *InterfaceState) GetIpv4OperStatus() IPv4OperStatus {
	if x != nil {
		return x.Ipv4OperStatus
	}
	return IPv4OperStatus_IPV4OPERSTATUS_STATUS_INVALID
}

type SubinterfaceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of this interface.
	Ifindex uint32 `protobuf:"varint,1,opt,name=ifindex,proto3" json:"ifindex,omitempty"` //接口索引
	// The administrative state of this interface.
	AdminStatus AdminStatus `protobuf:"varint,2,opt,name=admin_status,json=adminStatus,proto3,enum=zte.telemetry.interfaces.AdminStatus" json:"admin_status,omitempty"` //接口管理状态
	// The current operational state of this interface.
	OperStatus OperStatus `protobuf:"varint,3,opt,name=oper_status,json=operStatus,proto3,enum=zte.telemetry.interfaces.OperStatus" json:"oper_status,omitempty"` //接口操作状态
	// This timestamp indicates the absolute time of the last state change of the interface (e.g., up-to-down transition).
	LastChange uint64 `protobuf:"varint,4,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"` //上一次状态发生变化时间
	// When set to true, the interface is a logical interface which does not have an associated physical port or channel on the system.
	Logical bool `protobuf:"varint,5,opt,name=logical,proto3" json:"logical,omitempty"` //是否为逻辑口
	// The current IPv4 protocol operational state of this interface.
	Ipv4OperStatus IPv4OperStatus `protobuf:"varint,6,opt,name=ipv4_oper_status,json=ipv4OperStatus,proto3,enum=zte.telemetry.interfaces.IPv4OperStatus" json:"ipv4_oper_status,omitempty"` //接口v4状态
}

func (x *SubinterfaceState) Reset() {
	*x = SubinterfaceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubinterfaceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubinterfaceState) ProtoMessage() {}

func (x *SubinterfaceState) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubinterfaceState.ProtoReflect.Descriptor instead.
func (*SubinterfaceState) Descriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{3}
}

func (x *SubinterfaceState) GetIfindex() uint32 {
	if x != nil {
		return x.Ifindex
	}
	return 0
}

func (x *SubinterfaceState) GetAdminStatus() AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return AdminStatus_ADMIN_STATUS_INVALID
}

func (x *SubinterfaceState) GetOperStatus() OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return OperStatus_OPER_STATUS_INVALID
}

func (x *SubinterfaceState) GetLastChange() uint64 {
	if x != nil {
		return x.LastChange
	}
	return 0
}

func (x *SubinterfaceState) GetLogical() bool {
	if x != nil {
		return x.Logical
	}
	return false
}

func (x *SubinterfaceState) GetIpv4OperStatus() IPv4OperStatus {
	if x != nil {
		return x.Ipv4OperStatus
	}
	return IPv4OperStatus_IPV4OPERSTATUS_STATUS_INVALID
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for parent interface's statistic data.          *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path:  oc-if:interfaces/interface/state/counters                        *
//
// ***********************************************************************************
type InterfaceCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of octets received on the interface, including framing characters.
	InOctets uint64 `protobuf:"varint,1,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"` //接收字节数
	// The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were not addressed to a multicast or broadcast address at this sub-layer.
	InUnicastPkts uint64 `protobuf:"varint,2,opt,name=in_unicast_pkts,json=inUnicastPkts,proto3" json:"in_unicast_pkts,omitempty"` //接收单播帧数
	// The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a broadcast address at this sub-layer.
	InBroadcastPkts uint64 `protobuf:"varint,3,opt,name=in_broadcast_pkts,json=inBroadcastPkts,proto3" json:"in_broadcast_pkts,omitempty"` //接收广播帧数
	// The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a multicast address at this sub-layer. For a MAC-layer protocol, this includes both Group and Functional addresses.
	InMulticastPkts uint64 `protobuf:"varint,4,opt,name=in_multicast_pkts,json=inMulticastPkts,proto3" json:"in_multicast_pkts,omitempty"` //接收组播帧数
	// The number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.
	InDiscards uint64 `protobuf:"varint,5,opt,name=in_discards,json=inDiscards,proto3" json:"in_discards,omitempty"` //接收丢弃帧数
	// For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.
	InErrors uint64 `protobuf:"varint,6,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"` //接收错误帧数
	// For packet-oriented interfaces, the number of packets received via the interface that were discarded because of an unknown or unsupported protocol. For character-oriented or fixed-length interfaces that support protocol multiplexing, the number of transmission units received via the interface that were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter is not present.
	InUnknownProtos uint64 `protobuf:"varint,7,opt,name=in_unknown_protos,json=inUnknownProtos,proto3" json:"in_unknown_protos,omitempty"` //接收未知协议帧数
	// Number of received packets which had errors in the frame check sequence (FCS), i.e., framing errors.
	InFcsErrors uint64 `protobuf:"varint,8,opt,name=in_fcs_errors,json=inFcsErrors,proto3" json:"in_fcs_errors,omitempty"` //接收fcs校验错帧数
	// The total number of octets transmitted out of the interface, including framing characters.
	OutOctets uint64 `protobuf:"varint,9,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"` //发送字节数
	// The total number of packets that higher-level protocols requested be transmitted, and that were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.
	OutUnicastPkts uint64 `protobuf:"varint,10,opt,name=out_unicast_pkts,json=outUnicastPkts,proto3" json:"out_unicast_pkts,omitempty"` //发送单播帧数
	// The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.
	OutBroadcastPkts uint64 `protobuf:"varint,11,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"` //发送广播帧数
	// The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC-layer protocol, this includes both Group and Functional addresses.
	OutMulticastPkts uint64 `protobuf:"varint,12,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"` //发送组播帧数
	// The number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.
	OutDiscards uint64 `protobuf:"varint,13,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"` //发送丢弃帧数
	// For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.
	OutErrors uint64 `protobuf:"varint,14,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"` //发送错误帧数
	// Number of times the interface state has transitioned between up and down since the time the device restarted or the last-clear time, whichever is most recent.
	CarrierTransitions uint64 `protobuf:"varint,15,opt,name=carrier_transitions,json=carrierTransitions,proto3" json:"carrier_transitions,omitempty"` //状态变化次数
	// Timestamp of the last time the interface counters were cleared.
	LastClear uint64 `protobuf:"varint,16,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"` //上一次统计清除时间
	// The total number of packets received on the interface, including all unicast, multicast, broadcast and bad packets etc.
	InPkts uint64 `protobuf:"varint,17,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"` //接收帧数
	// The total number of packets transmitted out of the interface, including all unicast, multicast, broadcast, and bad packets etc.
	OutPkts uint64 `protobuf:"varint,18,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"` //发送帧数
	// The input utilization of bandwidith.
	InputUtilization float32 `protobuf:"fixed32,19,opt,name=input_utilization,json=inputUtilization,proto3" json:"input_utilization,omitempty"` //接收方向带宽利用率,Unit:1/10000
	// The output utilization of bandwidith.
	OutputUtilization float32 `protobuf:"fixed32,20,opt,name=output_utilization,json=outputUtilization,proto3" json:"output_utilization,omitempty"` //发送方向带宽利用率,Unit:1/10000
	// The input traffic rate(unit:Mbps).
	InTrafficRate float32 `protobuf:"fixed32,21,opt,name=in_traffic_rate,json=inTrafficRate,proto3" json:"in_traffic_rate,omitempty"` //接收流量速率,Unit:Mbps
	// The input packet rate(unit:Kfps).
	InPacketRate float32 `protobuf:"fixed32,22,opt,name=in_packet_rate,json=inPacketRate,proto3" json:"in_packet_rate,omitempty"` //接收帧速率,Unit:Kfps
	// The output traffic rate(unit:Mbps).
	OutTrafficRate float32 `protobuf:"fixed32,23,opt,name=out_traffic_rate,json=outTrafficRate,proto3" json:"out_traffic_rate,omitempty"` //发送流量速率,Unit:Mbps
	// The output packet rate(unit:Kfps).
	OutPacketRate float32 `protobuf:"fixed32,24,opt,name=out_packet_rate,json=outPacketRate,proto3" json:"out_packet_rate,omitempty"` //发送帧速率,Unit:Kfps
	// The total number of v4 octets received on the interface.
	InV4Octets uint64 `protobuf:"varint,25,opt,name=in_v4_octets,json=inV4Octets,proto3" json:"in_v4_octets,omitempty"` //接收ipv4字节数
	// The total number of v4 octets sent on the interface.
	OutV4Octets uint64 `protobuf:"varint,26,opt,name=out_v4_octets,json=outV4Octets,proto3" json:"out_v4_octets,omitempty"` //发送ipv4字节数
	// Total v4 packets received.
	InV4Pkts uint64 `protobuf:"varint,27,opt,name=in_v4_pkts,json=inV4Pkts,proto3" json:"in_v4_pkts,omitempty"` //接收ipv4帧数
	// Total v4 packets sent.
	OutV4Pkts uint64 `protobuf:"varint,28,opt,name=out_v4_pkts,json=outV4Pkts,proto3" json:"out_v4_pkts,omitempty"` //发送ipv4帧数
	// The total number of v6 octets received on the interface.
	InV6Octets uint64 `protobuf:"varint,29,opt,name=in_v6_octets,json=inV6Octets,proto3" json:"in_v6_octets,omitempty"` //接收ipv6字节数
	// The total number of v6 octets sent on the interface.
	OutV6Octets uint64 `protobuf:"varint,30,opt,name=out_v6_octets,json=outV6Octets,proto3" json:"out_v6_octets,omitempty"` //发送ipv6字节数
	// Total v6 packets received.
	InV6Pkts uint64 `protobuf:"varint,31,opt,name=in_v6_pkts,json=inV6Pkts,proto3" json:"in_v6_pkts,omitempty"` //接收ipv6帧数
	// Total v6 packets sent.
	OutV6Pkts uint64 `protobuf:"varint,32,opt,name=out_v6_pkts,json=outV6Pkts,proto3" json:"out_v6_pkts,omitempty"` //发送ipv6帧数
	// The input v4 traffic rate(unit:Mbps).
	InV4TrafficRate float32 `protobuf:"fixed32,33,opt,name=in_v4_traffic_rate,json=inV4TrafficRate,proto3" json:"in_v4_traffic_rate,omitempty"` //接收v4流量速率,Unit:Mbps
	// The input v4 packet rate(unit:Kfps).
	InV4PacketRate float32 `protobuf:"fixed32,34,opt,name=in_v4_packet_rate,json=inV4PacketRate,proto3" json:"in_v4_packet_rate,omitempty"` //接收v4帧速率,Unit:Kfps
	// The output v4 traffic rate(unit:Mbps).
	OutV4TrafficRate float32 `protobuf:"fixed32,35,opt,name=out_v4_traffic_rate,json=outV4TrafficRate,proto3" json:"out_v4_traffic_rate,omitempty"` //发送v4流量速率,Unit:Mbps
	// The output v4 packet rate(unit:Kfps).
	OutV4PacketRate float32 `protobuf:"fixed32,36,opt,name=out_v4_packet_rate,json=outV4PacketRate,proto3" json:"out_v4_packet_rate,omitempty"` //发送v4帧速率,Unit:Kfps
	// The input v6 traffic rate(unit:Mbps).
	InV6TrafficRate float32 `protobuf:"fixed32,37,opt,name=in_v6_traffic_rate,json=inV6TrafficRate,proto3" json:"in_v6_traffic_rate,omitempty"` //接收v6流量速率,Unit:Mbps
	// The input v6 packet rate(unit:Kfps).
	InV6PacketRate float32 `protobuf:"fixed32,38,opt,name=in_v6_packet_rate,json=inV6PacketRate,proto3" json:"in_v6_packet_rate,omitempty"` //接收v6帧速率,Unit:Kfps
	// The output v6 traffic rate(unit:Mbps).
	OutV6TrafficRate float32 `protobuf:"fixed32,39,opt,name=out_v6_traffic_rate,json=outV6TrafficRate,proto3" json:"out_v6_traffic_rate,omitempty"` //发送v6流量速率,Unit:Mbps
	// The output v6 packet rate(unit:Kfps).
	OutV6PacketRate float32 `protobuf:"fixed32,40,opt,name=out_v6_packet_rate,json=outV6PacketRate,proto3" json:"out_v6_packet_rate,omitempty"` //发送v6帧速率,Unit:Kfps
	// The input v4 utilization of bandwidith.
	InputV4Utilization float32 `protobuf:"fixed32,41,opt,name=input_v4_utilization,json=inputV4Utilization,proto3" json:"input_v4_utilization,omitempty"` //接收方向v4带宽利用率,Unit:1/10000
	// The output v4 utilization of bandwidith.
	OutputV4Utilization float32 `protobuf:"fixed32,42,opt,name=output_v4_utilization,json=outputV4Utilization,proto3" json:"output_v4_utilization,omitempty"` //发送方向v4带宽利用率,Unit:1/10000
	// The input v6 utilization of bandwidith.
	InputV6Utilization float32 `protobuf:"fixed32,43,opt,name=input_v6_utilization,json=inputV6Utilization,proto3" json:"input_v6_utilization,omitempty"` //接收方向v6带宽利用率,Unit:1/10000
	// The output v6 utilization of bandwidith.
	OutputV6Utilization float32 `protobuf:"fixed32,44,opt,name=output_v6_utilization,json=outputV6Utilization,proto3" json:"output_v6_utilization,omitempty"` //发送方向v6带宽利用率,Unit:1/10000
	// The total number of bier octets received on the interface.
	InBierOctets uint64 `protobuf:"varint,45,opt,name=in_bier_octets,json=inBierOctets,proto3" json:"in_bier_octets,omitempty"` //接收bier报文字节数
	// Total bier packets received.
	InBierPkts uint64 `protobuf:"varint,46,opt,name=in_bier_pkts,json=inBierPkts,proto3" json:"in_bier_pkts,omitempty"` //接收bier报文帧数
	// The total number of bier octets sent on the interface.
	OutBierOctets uint64 `protobuf:"varint,47,opt,name=out_bier_octets,json=outBierOctets,proto3" json:"out_bier_octets,omitempty"` //发送bier报文字节数
	// Total bier packets sent.
	OutBierPkts uint64 `protobuf:"varint,48,opt,name=out_bier_pkts,json=outBierPkts,proto3" json:"out_bier_pkts,omitempty"` //发送bier报文帧数
}

func (x *InterfaceCounters) Reset() {
	*x = InterfaceCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceCounters) ProtoMessage() {}

func (x *InterfaceCounters) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceCounters.ProtoReflect.Descriptor instead.
func (*InterfaceCounters) Descriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{4}
}

func (x *InterfaceCounters) GetInOctets() uint64 {
	if x != nil {
		return x.InOctets
	}
	return 0
}

func (x *InterfaceCounters) GetInUnicastPkts() uint64 {
	if x != nil {
		return x.InUnicastPkts
	}
	return 0
}

func (x *InterfaceCounters) GetInBroadcastPkts() uint64 {
	if x != nil {
		return x.InBroadcastPkts
	}
	return 0
}

func (x *InterfaceCounters) GetInMulticastPkts() uint64 {
	if x != nil {
		return x.InMulticastPkts
	}
	return 0
}

func (x *InterfaceCounters) GetInDiscards() uint64 {
	if x != nil {
		return x.InDiscards
	}
	return 0
}

func (x *InterfaceCounters) GetInErrors() uint64 {
	if x != nil {
		return x.InErrors
	}
	return 0
}

func (x *InterfaceCounters) GetInUnknownProtos() uint64 {
	if x != nil {
		return x.InUnknownProtos
	}
	return 0
}

func (x *InterfaceCounters) GetInFcsErrors() uint64 {
	if x != nil {
		return x.InFcsErrors
	}
	return 0
}

func (x *InterfaceCounters) GetOutOctets() uint64 {
	if x != nil {
		return x.OutOctets
	}
	return 0
}

func (x *InterfaceCounters) GetOutUnicastPkts() uint64 {
	if x != nil {
		return x.OutUnicastPkts
	}
	return 0
}

func (x *InterfaceCounters) GetOutBroadcastPkts() uint64 {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return 0
}

func (x *InterfaceCounters) GetOutMulticastPkts() uint64 {
	if x != nil {
		return x.OutMulticastPkts
	}
	return 0
}

func (x *InterfaceCounters) GetOutDiscards() uint64 {
	if x != nil {
		return x.OutDiscards
	}
	return 0
}

func (x *InterfaceCounters) GetOutErrors() uint64 {
	if x != nil {
		return x.OutErrors
	}
	return 0
}

func (x *InterfaceCounters) GetCarrierTransitions() uint64 {
	if x != nil {
		return x.CarrierTransitions
	}
	return 0
}

func (x *InterfaceCounters) GetLastClear() uint64 {
	if x != nil {
		return x.LastClear
	}
	return 0
}

func (x *InterfaceCounters) GetInPkts() uint64 {
	if x != nil {
		return x.InPkts
	}
	return 0
}

func (x *InterfaceCounters) GetOutPkts() uint64 {
	if x != nil {
		return x.OutPkts
	}
	return 0
}

func (x *InterfaceCounters) GetInputUtilization() float32 {
	if x != nil {
		return x.InputUtilization
	}
	return 0
}

func (x *InterfaceCounters) GetOutputUtilization() float32 {
	if x != nil {
		return x.OutputUtilization
	}
	return 0
}

func (x *InterfaceCounters) GetInTrafficRate() float32 {
	if x != nil {
		return x.InTrafficRate
	}
	return 0
}

func (x *InterfaceCounters) GetInPacketRate() float32 {
	if x != nil {
		return x.InPacketRate
	}
	return 0
}

func (x *InterfaceCounters) GetOutTrafficRate() float32 {
	if x != nil {
		return x.OutTrafficRate
	}
	return 0
}

func (x *InterfaceCounters) GetOutPacketRate() float32 {
	if x != nil {
		return x.OutPacketRate
	}
	return 0
}

func (x *InterfaceCounters) GetInV4Octets() uint64 {
	if x != nil {
		return x.InV4Octets
	}
	return 0
}

func (x *InterfaceCounters) GetOutV4Octets() uint64 {
	if x != nil {
		return x.OutV4Octets
	}
	return 0
}

func (x *InterfaceCounters) GetInV4Pkts() uint64 {
	if x != nil {
		return x.InV4Pkts
	}
	return 0
}

func (x *InterfaceCounters) GetOutV4Pkts() uint64 {
	if x != nil {
		return x.OutV4Pkts
	}
	return 0
}

func (x *InterfaceCounters) GetInV6Octets() uint64 {
	if x != nil {
		return x.InV6Octets
	}
	return 0
}

func (x *InterfaceCounters) GetOutV6Octets() uint64 {
	if x != nil {
		return x.OutV6Octets
	}
	return 0
}

func (x *InterfaceCounters) GetInV6Pkts() uint64 {
	if x != nil {
		return x.InV6Pkts
	}
	return 0
}

func (x *InterfaceCounters) GetOutV6Pkts() uint64 {
	if x != nil {
		return x.OutV6Pkts
	}
	return 0
}

func (x *InterfaceCounters) GetInV4TrafficRate() float32 {
	if x != nil {
		return x.InV4TrafficRate
	}
	return 0
}

func (x *InterfaceCounters) GetInV4PacketRate() float32 {
	if x != nil {
		return x.InV4PacketRate
	}
	return 0
}

func (x *InterfaceCounters) GetOutV4TrafficRate() float32 {
	if x != nil {
		return x.OutV4TrafficRate
	}
	return 0
}

func (x *InterfaceCounters) GetOutV4PacketRate() float32 {
	if x != nil {
		return x.OutV4PacketRate
	}
	return 0
}

func (x *InterfaceCounters) GetInV6TrafficRate() float32 {
	if x != nil {
		return x.InV6TrafficRate
	}
	return 0
}

func (x *InterfaceCounters) GetInV6PacketRate() float32 {
	if x != nil {
		return x.InV6PacketRate
	}
	return 0
}

func (x *InterfaceCounters) GetOutV6TrafficRate() float32 {
	if x != nil {
		return x.OutV6TrafficRate
	}
	return 0
}

func (x *InterfaceCounters) GetOutV6PacketRate() float32 {
	if x != nil {
		return x.OutV6PacketRate
	}
	return 0
}

func (x *InterfaceCounters) GetInputV4Utilization() float32 {
	if x != nil {
		return x.InputV4Utilization
	}
	return 0
}

func (x *InterfaceCounters) GetOutputV4Utilization() float32 {
	if x != nil {
		return x.OutputV4Utilization
	}
	return 0
}

func (x *InterfaceCounters) GetInputV6Utilization() float32 {
	if x != nil {
		return x.InputV6Utilization
	}
	return 0
}

func (x *InterfaceCounters) GetOutputV6Utilization() float32 {
	if x != nil {
		return x.OutputV6Utilization
	}
	return 0
}

func (x *InterfaceCounters) GetInBierOctets() uint64 {
	if x != nil {
		return x.InBierOctets
	}
	return 0
}

func (x *InterfaceCounters) GetInBierPkts() uint64 {
	if x != nil {
		return x.InBierPkts
	}
	return 0
}

func (x *InterfaceCounters) GetOutBierOctets() uint64 {
	if x != nil {
		return x.OutBierOctets
	}
	return 0
}

func (x *InterfaceCounters) GetOutBierPkts() uint64 {
	if x != nil {
		return x.OutBierPkts
	}
	return 0
}

type SubinterfaceCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of octets received on the interface, including framing characters.
	InOctets uint64 `protobuf:"varint,1,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"` //接收字节数
	// The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were not addressed to a multicast or broadcast address at this sub-layer.
	InUnicastPkts uint64 `protobuf:"varint,2,opt,name=in_unicast_pkts,json=inUnicastPkts,proto3" json:"in_unicast_pkts,omitempty"` //接收单播帧数
	// The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a broadcast address at this sub-layer.
	InBroadcastPkts uint64 `protobuf:"varint,3,opt,name=in_broadcast_pkts,json=inBroadcastPkts,proto3" json:"in_broadcast_pkts,omitempty"` //接收广播帧数
	// The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a multicast address at this sub-layer. For a MAC-layer protocol, this includes both Group and Functional addresses.
	InMulticastPkts uint64 `protobuf:"varint,4,opt,name=in_multicast_pkts,json=inMulticastPkts,proto3" json:"in_multicast_pkts,omitempty"` //接收组播帧数
	// The number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.
	InDiscards uint64 `protobuf:"varint,5,opt,name=in_discards,json=inDiscards,proto3" json:"in_discards,omitempty"` //接收丢弃帧数
	// For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.
	InErrors uint64 `protobuf:"varint,6,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"` //接收错误帧数
	// For packet-oriented interfaces, the number of packets received via the interface that were discarded because of an unknown or unsupported protocol. For character-oriented or fixed-length interfaces that support protocol multiplexing, the number of transmission units received via the interface that were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter is not present.
	InUnknownProtos uint64 `protobuf:"varint,7,opt,name=in_unknown_protos,json=inUnknownProtos,proto3" json:"in_unknown_protos,omitempty"` //接收未知协议帧数
	// Number of received packets which had errors in the frame check sequence (FCS), i.e., framing errors.
	InFcsErrors uint64 `protobuf:"varint,8,opt,name=in_fcs_errors,json=inFcsErrors,proto3" json:"in_fcs_errors,omitempty"` //接收fcs校验错帧数
	// The total number of octets transmitted out of the interface, including framing characters.
	OutOctets uint64 `protobuf:"varint,9,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"` //发送字节数
	// The total number of packets that higher-level protocols requested be transmitted, and that were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.
	OutUnicastPkts uint64 `protobuf:"varint,10,opt,name=out_unicast_pkts,json=outUnicastPkts,proto3" json:"out_unicast_pkts,omitempty"` //发送单播帧数
	// The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.
	OutBroadcastPkts uint64 `protobuf:"varint,11,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"` //发送广播帧数
	// The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC-layer protocol, this includes both Group and Functional addresses.
	OutMulticastPkts uint64 `protobuf:"varint,12,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"` //发送组播帧数
	// The number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.
	OutDiscards uint64 `protobuf:"varint,13,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"` //发送丢弃帧数
	// For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.
	OutErrors uint64 `protobuf:"varint,14,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"` //发送错误帧数
	// Number of times the interface state has transitioned between up and down since the time the device restarted or the last-clear time, whichever is most recent.
	CarrierTransitions uint64 `protobuf:"varint,15,opt,name=carrier_transitions,json=carrierTransitions,proto3" json:"carrier_transitions,omitempty"` //状态变化次数
	// Timestamp of the last time the interface counters were cleared.
	LastClear uint64 `protobuf:"varint,16,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"` //上一次统计清除时间
	// The total number of packets received on the interface, including all unicast, multicast, broadcast and bad packets etc.
	InPkts uint64 `protobuf:"varint,17,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"` //接收帧数
	// The total number of packets transmitted out of the interface, including all unicast, multicast, broadcast, and bad packets etc.
	OutPkts uint64 `protobuf:"varint,18,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"` //发送帧数
	// The input utilization of bandwidith.
	InputUtilization float32 `protobuf:"fixed32,19,opt,name=input_utilization,json=inputUtilization,proto3" json:"input_utilization,omitempty"` //接收方向带宽利用率,Unit:1/10000
	// The output utilization of bandwidith.
	OutputUtilization float32 `protobuf:"fixed32,20,opt,name=output_utilization,json=outputUtilization,proto3" json:"output_utilization,omitempty"` //发送方向带宽利用率,Unit:1/10000
	// The input traffic rate(unit:Mbps).
	InTrafficRate float32 `protobuf:"fixed32,21,opt,name=in_traffic_rate,json=inTrafficRate,proto3" json:"in_traffic_rate,omitempty"` //接收流量速率,Unit:Mbps
	// The input packet rate(unit:Kfps).
	InPacketRate float32 `protobuf:"fixed32,22,opt,name=in_packet_rate,json=inPacketRate,proto3" json:"in_packet_rate,omitempty"` //接收帧速率,Unit:Kfps
	// The output traffic rate(unit:Mbps).
	OutTrafficRate float32 `protobuf:"fixed32,23,opt,name=out_traffic_rate,json=outTrafficRate,proto3" json:"out_traffic_rate,omitempty"` //发送流量速率,Unit:Mbps
	// The output packet rate(unit:Kfps).
	OutPacketRate float32 `protobuf:"fixed32,24,opt,name=out_packet_rate,json=outPacketRate,proto3" json:"out_packet_rate,omitempty"` //发送帧速率,Unit:Kfps
	// The total number of v4 octets received on the interface.
	InV4Octets uint64 `protobuf:"varint,25,opt,name=in_v4_octets,json=inV4Octets,proto3" json:"in_v4_octets,omitempty"` //接收ipv4字节数
	// The total number of v4 octets sent on the interface.
	OutV4Octets uint64 `protobuf:"varint,26,opt,name=out_v4_octets,json=outV4Octets,proto3" json:"out_v4_octets,omitempty"` //发送ipv4字节数
	// Total v4 packets received.
	InV4Pkts uint64 `protobuf:"varint,27,opt,name=in_v4_pkts,json=inV4Pkts,proto3" json:"in_v4_pkts,omitempty"` //接收ipv4帧数
	// Total v4 packets sent.
	OutV4Pkts uint64 `protobuf:"varint,28,opt,name=out_v4_pkts,json=outV4Pkts,proto3" json:"out_v4_pkts,omitempty"` //发送ipv4帧数
	// The total number of v6 octets received on the interface.
	InV6Octets uint64 `protobuf:"varint,29,opt,name=in_v6_octets,json=inV6Octets,proto3" json:"in_v6_octets,omitempty"` //接收ipv6字节数
	// The total number of v6 octets sent on the interface.
	OutV6Octets uint64 `protobuf:"varint,30,opt,name=out_v6_octets,json=outV6Octets,proto3" json:"out_v6_octets,omitempty"` //发送ipv6字节数
	// Total v6 packets received.
	InV6Pkts uint64 `protobuf:"varint,31,opt,name=in_v6_pkts,json=inV6Pkts,proto3" json:"in_v6_pkts,omitempty"` //接收ipv6帧数
	// Total v6 packets sent.
	OutV6Pkts uint64 `protobuf:"varint,32,opt,name=out_v6_pkts,json=outV6Pkts,proto3" json:"out_v6_pkts,omitempty"` //发送ipv6帧数
	// The input v4 traffic rate(unit:Mbps).
	InV4TrafficRate float32 `protobuf:"fixed32,33,opt,name=in_v4_traffic_rate,json=inV4TrafficRate,proto3" json:"in_v4_traffic_rate,omitempty"` //接收v4流量速率,Unit:Mbps
	// The input v4 packet rate(unit:Kfps).
	InV4PacketRate float32 `protobuf:"fixed32,34,opt,name=in_v4_packet_rate,json=inV4PacketRate,proto3" json:"in_v4_packet_rate,omitempty"` //接收v4帧速率,Unit:Kfps
	// The output v4 traffic rate(unit:Mbps).
	OutV4TrafficRate float32 `protobuf:"fixed32,35,opt,name=out_v4_traffic_rate,json=outV4TrafficRate,proto3" json:"out_v4_traffic_rate,omitempty"` //发送v4流量速率,Unit:Mbps
	// The output v4 packet rate(unit:Kfps).
	OutV4PacketRate float32 `protobuf:"fixed32,36,opt,name=out_v4_packet_rate,json=outV4PacketRate,proto3" json:"out_v4_packet_rate,omitempty"` //发送v4帧速率,Unit:Kfps
	// The input v6 traffic rate(unit:Mbps).
	InV6TrafficRate float32 `protobuf:"fixed32,37,opt,name=in_v6_traffic_rate,json=inV6TrafficRate,proto3" json:"in_v6_traffic_rate,omitempty"` //接收v6流量速率,Unit:Mbps
	// The input v6 packet rate(unit:Kfps).
	InV6PacketRate float32 `protobuf:"fixed32,38,opt,name=in_v6_packet_rate,json=inV6PacketRate,proto3" json:"in_v6_packet_rate,omitempty"` //接收v6帧速率,Unit:Kfps
	// The output v6 traffic rate(unit:Mbps).
	OutV6TrafficRate float32 `protobuf:"fixed32,39,opt,name=out_v6_traffic_rate,json=outV6TrafficRate,proto3" json:"out_v6_traffic_rate,omitempty"` //发送v6流量速率,Unit:Mbps
	// The output v6 packet rate(unit:Kfps).
	OutV6PacketRate float32 `protobuf:"fixed32,40,opt,name=out_v6_packet_rate,json=outV6PacketRate,proto3" json:"out_v6_packet_rate,omitempty"` //发送v6帧速率,Unit:Kfps
	// The input v4 utilization of bandwidith.
	InputV4Utilization float32 `protobuf:"fixed32,41,opt,name=input_v4_utilization,json=inputV4Utilization,proto3" json:"input_v4_utilization,omitempty"` //接收方向v4带宽利用率,Unit:1/10000
	// The output v4 utilization of bandwidith.
	OutputV4Utilization float32 `protobuf:"fixed32,42,opt,name=output_v4_utilization,json=outputV4Utilization,proto3" json:"output_v4_utilization,omitempty"` //发送方向v4带宽利用率,Unit:1/10000
	// The input v6 utilization of bandwidith.
	InputV6Utilization float32 `protobuf:"fixed32,43,opt,name=input_v6_utilization,json=inputV6Utilization,proto3" json:"input_v6_utilization,omitempty"` //接收方向v6带宽利用率,Unit:1/10000
	// The output v6 utilization of bandwidith.
	OutputV6Utilization float32 `protobuf:"fixed32,44,opt,name=output_v6_utilization,json=outputV6Utilization,proto3" json:"output_v6_utilization,omitempty"` //发送方向v6带宽利用率,Unit:1/10000
	// The total number of bier octets received on the interface.
	InBierOctets uint64 `protobuf:"varint,45,opt,name=in_bier_octets,json=inBierOctets,proto3" json:"in_bier_octets,omitempty"` //接收bier报文字节数
	// Total bier packets received.
	InBierPkts uint64 `protobuf:"varint,46,opt,name=in_bier_pkts,json=inBierPkts,proto3" json:"in_bier_pkts,omitempty"` //接收bier报文帧数
	// The total number of bier octets sent on the interface.
	OutBierOctets uint64 `protobuf:"varint,47,opt,name=out_bier_octets,json=outBierOctets,proto3" json:"out_bier_octets,omitempty"` //发送bier报文字节数
	// Total bier packets sent.
	OutBierPkts uint64 `protobuf:"varint,48,opt,name=out_bier_pkts,json=outBierPkts,proto3" json:"out_bier_pkts,omitempty"` //发送bier报文帧数
}

func (x *SubinterfaceCounters) Reset() {
	*x = SubinterfaceCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubinterfaceCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubinterfaceCounters) ProtoMessage() {}

func (x *SubinterfaceCounters) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubinterfaceCounters.ProtoReflect.Descriptor instead.
func (*SubinterfaceCounters) Descriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{5}
}

func (x *SubinterfaceCounters) GetInOctets() uint64 {
	if x != nil {
		return x.InOctets
	}
	return 0
}

func (x *SubinterfaceCounters) GetInUnicastPkts() uint64 {
	if x != nil {
		return x.InUnicastPkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetInBroadcastPkts() uint64 {
	if x != nil {
		return x.InBroadcastPkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetInMulticastPkts() uint64 {
	if x != nil {
		return x.InMulticastPkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetInDiscards() uint64 {
	if x != nil {
		return x.InDiscards
	}
	return 0
}

func (x *SubinterfaceCounters) GetInErrors() uint64 {
	if x != nil {
		return x.InErrors
	}
	return 0
}

func (x *SubinterfaceCounters) GetInUnknownProtos() uint64 {
	if x != nil {
		return x.InUnknownProtos
	}
	return 0
}

func (x *SubinterfaceCounters) GetInFcsErrors() uint64 {
	if x != nil {
		return x.InFcsErrors
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutOctets() uint64 {
	if x != nil {
		return x.OutOctets
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutUnicastPkts() uint64 {
	if x != nil {
		return x.OutUnicastPkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutBroadcastPkts() uint64 {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutMulticastPkts() uint64 {
	if x != nil {
		return x.OutMulticastPkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutDiscards() uint64 {
	if x != nil {
		return x.OutDiscards
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutErrors() uint64 {
	if x != nil {
		return x.OutErrors
	}
	return 0
}

func (x *SubinterfaceCounters) GetCarrierTransitions() uint64 {
	if x != nil {
		return x.CarrierTransitions
	}
	return 0
}

func (x *SubinterfaceCounters) GetLastClear() uint64 {
	if x != nil {
		return x.LastClear
	}
	return 0
}

func (x *SubinterfaceCounters) GetInPkts() uint64 {
	if x != nil {
		return x.InPkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutPkts() uint64 {
	if x != nil {
		return x.OutPkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetInputUtilization() float32 {
	if x != nil {
		return x.InputUtilization
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutputUtilization() float32 {
	if x != nil {
		return x.OutputUtilization
	}
	return 0
}

func (x *SubinterfaceCounters) GetInTrafficRate() float32 {
	if x != nil {
		return x.InTrafficRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetInPacketRate() float32 {
	if x != nil {
		return x.InPacketRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutTrafficRate() float32 {
	if x != nil {
		return x.OutTrafficRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutPacketRate() float32 {
	if x != nil {
		return x.OutPacketRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetInV4Octets() uint64 {
	if x != nil {
		return x.InV4Octets
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutV4Octets() uint64 {
	if x != nil {
		return x.OutV4Octets
	}
	return 0
}

func (x *SubinterfaceCounters) GetInV4Pkts() uint64 {
	if x != nil {
		return x.InV4Pkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutV4Pkts() uint64 {
	if x != nil {
		return x.OutV4Pkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetInV6Octets() uint64 {
	if x != nil {
		return x.InV6Octets
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutV6Octets() uint64 {
	if x != nil {
		return x.OutV6Octets
	}
	return 0
}

func (x *SubinterfaceCounters) GetInV6Pkts() uint64 {
	if x != nil {
		return x.InV6Pkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutV6Pkts() uint64 {
	if x != nil {
		return x.OutV6Pkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetInV4TrafficRate() float32 {
	if x != nil {
		return x.InV4TrafficRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetInV4PacketRate() float32 {
	if x != nil {
		return x.InV4PacketRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutV4TrafficRate() float32 {
	if x != nil {
		return x.OutV4TrafficRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutV4PacketRate() float32 {
	if x != nil {
		return x.OutV4PacketRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetInV6TrafficRate() float32 {
	if x != nil {
		return x.InV6TrafficRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetInV6PacketRate() float32 {
	if x != nil {
		return x.InV6PacketRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutV6TrafficRate() float32 {
	if x != nil {
		return x.OutV6TrafficRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutV6PacketRate() float32 {
	if x != nil {
		return x.OutV6PacketRate
	}
	return 0
}

func (x *SubinterfaceCounters) GetInputV4Utilization() float32 {
	if x != nil {
		return x.InputV4Utilization
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutputV4Utilization() float32 {
	if x != nil {
		return x.OutputV4Utilization
	}
	return 0
}

func (x *SubinterfaceCounters) GetInputV6Utilization() float32 {
	if x != nil {
		return x.InputV6Utilization
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutputV6Utilization() float32 {
	if x != nil {
		return x.OutputV6Utilization
	}
	return 0
}

func (x *SubinterfaceCounters) GetInBierOctets() uint64 {
	if x != nil {
		return x.InBierOctets
	}
	return 0
}

func (x *SubinterfaceCounters) GetInBierPkts() uint64 {
	if x != nil {
		return x.InBierPkts
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutBierOctets() uint64 {
	if x != nil {
		return x.OutBierOctets
	}
	return 0
}

func (x *SubinterfaceCounters) GetOutBierPkts() uint64 {
	if x != nil {
		return x.OutBierPkts
	}
	return 0
}

type StatePeriodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of this interface.
	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //接口封装类型
	// The index of this interface.
	Ifindex uint32 `protobuf:"varint,2,opt,name=ifindex,proto3" json:"ifindex,omitempty"` //接口索引
	// The administrative state of this interface.
	AdminStatus AdminStatus `protobuf:"varint,3,opt,name=admin_status,json=adminStatus,proto3,enum=zte.telemetry.interfaces.AdminStatus" json:"admin_status,omitempty"` //接口管理状态
	// The current operational state of this interface.
	OperStatus OperStatus `protobuf:"varint,4,opt,name=oper_status,json=operStatus,proto3,enum=zte.telemetry.interfaces.OperStatus" json:"oper_status,omitempty"` //接口操作状态
	// The physical state of this interface.
	PhyStatus StatePeriodInfo_PhyStatus `protobuf:"varint,5,opt,name=phy_status,json=phyStatus,proto3,enum=zte.telemetry.interfaces.StatePeriodInfo_PhyStatus" json:"phy_status,omitempty"` //接口物理状态
	// The current IPv4 protocol operational state of this interface.
	Ipv4OperStatus IPv4OperStatus `protobuf:"varint,6,opt,name=ipv4_oper_status,json=ipv4OperStatus,proto3,enum=zte.telemetry.interfaces.IPv4OperStatus" json:"ipv4_oper_status,omitempty"` //接口v4状态
	// The current IPv6 protocol operational state of this interface.
	Ipv6OperStatus IPv6OperStatus `protobuf:"varint,7,opt,name=ipv6_oper_status,json=ipv6OperStatus,proto3,enum=zte.telemetry.interfaces.IPv6OperStatus" json:"ipv6_oper_status,omitempty"` //接口v6状态
}

func (x *StatePeriodInfo) Reset() {
	*x = StatePeriodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatePeriodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatePeriodInfo) ProtoMessage() {}

func (x *StatePeriodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatePeriodInfo.ProtoReflect.Descriptor instead.
func (*StatePeriodInfo) Descriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{6}
}

func (x *StatePeriodInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *StatePeriodInfo) GetIfindex() uint32 {
	if x != nil {
		return x.Ifindex
	}
	return 0
}

func (x *StatePeriodInfo) GetAdminStatus() AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return AdminStatus_ADMIN_STATUS_INVALID
}

func (x *StatePeriodInfo) GetOperStatus() OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return OperStatus_OPER_STATUS_INVALID
}

func (x *StatePeriodInfo) GetPhyStatus() StatePeriodInfo_PhyStatus {
	if x != nil {
		return x.PhyStatus
	}
	return StatePeriodInfo_PHY_STATUS_INVALID
}

func (x *StatePeriodInfo) GetIpv4OperStatus() IPv4OperStatus {
	if x != nil {
		return x.Ipv4OperStatus
	}
	return IPv4OperStatus_IPV4OPERSTATUS_STATUS_INVALID
}

func (x *StatePeriodInfo) GetIpv6OperStatus() IPv6OperStatus {
	if x != nil {
		return x.Ipv6OperStatus
	}
	return IPv6OperStatus_IPV6OPERSTATUS_STATUS_INVALID
}

type SubStatePeriodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of this interface.
	Ifindex uint32 `protobuf:"varint,1,opt,name=ifindex,proto3" json:"ifindex,omitempty"` //接口索引
	// The administrative state of this interface.
	AdminStatus AdminStatus `protobuf:"varint,2,opt,name=admin_status,json=adminStatus,proto3,enum=zte.telemetry.interfaces.AdminStatus" json:"admin_status,omitempty"` //接口管理状态
	// The current operational state of this interface.
	OperStatus OperStatus `protobuf:"varint,3,opt,name=oper_status,json=operStatus,proto3,enum=zte.telemetry.interfaces.OperStatus" json:"oper_status,omitempty"` //接口操作状态
	// The physical state of this interface.
	PhyStatus SubStatePeriodInfo_PhyStatus `protobuf:"varint,4,opt,name=phy_status,json=phyStatus,proto3,enum=zte.telemetry.interfaces.SubStatePeriodInfo_PhyStatus" json:"phy_status,omitempty"` //接口物理状态
	// The current IPv4 protocol operational state of this interface.
	Ipv4OperStatus IPv4OperStatus `protobuf:"varint,5,opt,name=ipv4_oper_status,json=ipv4OperStatus,proto3,enum=zte.telemetry.interfaces.IPv4OperStatus" json:"ipv4_oper_status,omitempty"` //接口v4状态
	// The current IPv6 protocol operational state of this interface.
	Ipv6OperStatus IPv6OperStatus `protobuf:"varint,6,opt,name=ipv6_oper_status,json=ipv6OperStatus,proto3,enum=zte.telemetry.interfaces.IPv6OperStatus" json:"ipv6_oper_status,omitempty"` //接口v6状态
}

func (x *SubStatePeriodInfo) Reset() {
	*x = SubStatePeriodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubStatePeriodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubStatePeriodInfo) ProtoMessage() {}

func (x *SubStatePeriodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubStatePeriodInfo.ProtoReflect.Descriptor instead.
func (*SubStatePeriodInfo) Descriptor() ([]byte, []int) {
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP(), []int{7}
}

func (x *SubStatePeriodInfo) GetIfindex() uint32 {
	if x != nil {
		return x.Ifindex
	}
	return 0
}

func (x *SubStatePeriodInfo) GetAdminStatus() AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return AdminStatus_ADMIN_STATUS_INVALID
}

func (x *SubStatePeriodInfo) GetOperStatus() OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return OperStatus_OPER_STATUS_INVALID
}

func (x *SubStatePeriodInfo) GetPhyStatus() SubStatePeriodInfo_PhyStatus {
	if x != nil {
		return x.PhyStatus
	}
	return SubStatePeriodInfo_PHY_STATUS_INVALID
}

func (x *SubStatePeriodInfo) GetIpv4OperStatus() IPv4OperStatus {
	if x != nil {
		return x.Ipv4OperStatus
	}
	return IPv4OperStatus_IPV4OPERSTATUS_STATUS_INVALID
}

func (x *SubStatePeriodInfo) GetIpv6OperStatus() IPv6OperStatus {
	if x != nil {
		return x.Ipv6OperStatus
	}
	return IPv6OperStatus_IPV6OPERSTATUS_STATUS_INVALID
}

var File_zxr10_interfaces_zxr10_interfaces_proto protoreflect.FileDescriptor

var file_zxr10_interfaces_zxr10_interfaces_proto_rawDesc = []byte{
	0x0a, 0x27, 0x7a, 0x78, 0x72, 0x31, 0x30, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7a, 0x78, 0x72, 0x31, 0x30, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x7a, 0x74, 0x65, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x74,
	0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0x92, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x54,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0xfe, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x68, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70, 0x68, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x4f, 0x70,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x4f, 0x70,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x09, 0x50, 0x68, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x48, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x02, 0x22, 0xcd, 0x02, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x7a, 0x74,
	0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x45, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x52, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x74,
	0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x4f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x4f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf5, 0x0e, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69,
	0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x69, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x46, 0x63, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x6f, 0x75, 0x74, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69,
	0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x6f, 0x75, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x56, 0x34, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x34, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x56, 0x34, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x56, 0x34, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x34, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x56, 0x34, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x56, 0x36, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x56,
	0x36, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x76, 0x36,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x56,
	0x36, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x56,
	0x36, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x69, 0x6e, 0x56, 0x34, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x69,
	0x6e, 0x56, 0x34, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x34, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x56,
	0x34, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x6f, 0x75, 0x74, 0x5f, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x56, 0x34, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f,
	0x76, 0x36, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x69, 0x6e, 0x56, 0x36, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x69, 0x6e, 0x56, 0x36, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x6f, 0x75, 0x74, 0x56, 0x36, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6f, 0x75,
	0x74, 0x56, 0x36, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x34, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x56, 0x34, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x34, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x34, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x36, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x36, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x36, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f,
	0x62, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x69, 0x6e, 0x42, 0x69, 0x65, 0x72, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x42, 0x69, 0x65, 0x72, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x42,
	0x69, 0x65, 0x72, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x5f, 0x62, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x65, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x22, 0xf8, 0x0e,
	0x0a, 0x14, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x6e, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x46, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f,
	0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x76,
	0x34, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x69, 0x6e, 0x56, 0x34, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x5f, 0x76, 0x34, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x56, 0x34, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x56, 0x34, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x6f, 0x75, 0x74, 0x5f, 0x76, 0x34, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x56, 0x34, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x56, 0x36, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x56, 0x36, 0x4f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x56, 0x36, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x56, 0x36, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x69, 0x6e,
	0x56, 0x34, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x11, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x69, 0x6e, 0x56, 0x34, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x5f,
	0x76, 0x34, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x56, 0x34, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x76,
	0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x56, 0x34, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x69, 0x6e, 0x56, 0x36, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x69, 0x6e,
	0x56, 0x36, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13,
	0x6f, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x56, 0x36,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6f,
	0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x56, 0x36, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x76, 0x34, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x34, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x34, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x56, 0x34, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x56, 0x36, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x36, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x36, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x65, 0x72, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x6e,
	0x42, 0x69, 0x65, 0x72, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e,
	0x5f, 0x62, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x69, 0x6e, 0x42, 0x69, 0x65, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x65, 0x72, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x65, 0x72,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x42, 0x69, 0x65, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x22, 0x99, 0x04, 0x0a, 0x0f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x7a, 0x74, 0x65, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0a, 0x70,
	0x68, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x52, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x74, 0x65, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x50, 0x76, 0x36, 0x4f, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x4f, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x09, 0x50, 0x68, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x48, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x48, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x02, 0x22, 0x8b, 0x04, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x7a, 0x74,
	0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x45, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x68, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x7a, 0x74, 0x65,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x70, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a,
	0x10, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x52, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x74,
	0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x50, 0x76, 0x36, 0x4f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x4f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x09, 0x50, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x48, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x2a, 0x6d, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x2a, 0xd9, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x2a, 0x71, 0x0a,
	0x0e, 0x49, 0x50, 0x76, 0x34, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x1d, 0x49, 0x50, 0x56, 0x34, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x56, 0x34, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x56, 0x34, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02,
	0x2a, 0x71, 0x0a, 0x0e, 0x49, 0x50, 0x76, 0x36, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x50, 0x56, 0x36, 0x4f, 0x50, 0x45, 0x52, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x56, 0x36, 0x4f, 0x50, 0x45,
	0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x56, 0x36, 0x4f, 0x50, 0x45, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x02, 0x42, 0x14, 0x5a, 0x12, 0x7a, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_zxr10_interfaces_zxr10_interfaces_proto_rawDescOnce sync.Once
	file_zxr10_interfaces_zxr10_interfaces_proto_rawDescData = file_zxr10_interfaces_zxr10_interfaces_proto_rawDesc
)

func file_zxr10_interfaces_zxr10_interfaces_proto_rawDescGZIP() []byte {
	file_zxr10_interfaces_zxr10_interfaces_proto_rawDescOnce.Do(func() {
		file_zxr10_interfaces_zxr10_interfaces_proto_rawDescData = protoimpl.X.CompressGZIP(file_zxr10_interfaces_zxr10_interfaces_proto_rawDescData)
	})
	return file_zxr10_interfaces_zxr10_interfaces_proto_rawDescData
}

var file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_zxr10_interfaces_zxr10_interfaces_proto_goTypes = []any{
	(AdminStatus)(0),                  // 0: zte.telemetry.interfaces.AdminStatus
	(OperStatus)(0),                   // 1: zte.telemetry.interfaces.OperStatus
	(IPv4OperStatus)(0),               // 2: zte.telemetry.interfaces.IPv4OperStatus
	(IPv6OperStatus)(0),               // 3: zte.telemetry.interfaces.IPv6OperStatus
	(InterfaceState_PhyStatus)(0),     // 4: zte.telemetry.interfaces.InterfaceState.PhyStatus
	(StatePeriodInfo_PhyStatus)(0),    // 5: zte.telemetry.interfaces.StatePeriodInfo.PhyStatus
	(SubStatePeriodInfo_PhyStatus)(0), // 6: zte.telemetry.interfaces.SubStatePeriodInfo.PhyStatus
	(*InterfaceInfo)(nil),             // 7: zte.telemetry.interfaces.InterfaceInfo
	(*SubinterfaceInfo)(nil),          // 8: zte.telemetry.interfaces.SubinterfaceInfo
	(*InterfaceState)(nil),            // 9: zte.telemetry.interfaces.InterfaceState
	(*SubinterfaceState)(nil),         // 10: zte.telemetry.interfaces.SubinterfaceState
	(*InterfaceCounters)(nil),         // 11: zte.telemetry.interfaces.InterfaceCounters
	(*SubinterfaceCounters)(nil),      // 12: zte.telemetry.interfaces.SubinterfaceCounters
	(*StatePeriodInfo)(nil),           // 13: zte.telemetry.interfaces.StatePeriodInfo
	(*SubStatePeriodInfo)(nil),        // 14: zte.telemetry.interfaces.SubStatePeriodInfo
}
var file_zxr10_interfaces_zxr10_interfaces_proto_depIdxs = []int32{
	9,  // 0: zte.telemetry.interfaces.InterfaceInfo.state:type_name -> zte.telemetry.interfaces.InterfaceState
	11, // 1: zte.telemetry.interfaces.InterfaceInfo.counters:type_name -> zte.telemetry.interfaces.InterfaceCounters
	8,  // 2: zte.telemetry.interfaces.InterfaceInfo.subinterface:type_name -> zte.telemetry.interfaces.SubinterfaceInfo
	13, // 3: zte.telemetry.interfaces.InterfaceInfo.statePeriod:type_name -> zte.telemetry.interfaces.StatePeriodInfo
	10, // 4: zte.telemetry.interfaces.SubinterfaceInfo.state:type_name -> zte.telemetry.interfaces.SubinterfaceState
	12, // 5: zte.telemetry.interfaces.SubinterfaceInfo.counters:type_name -> zte.telemetry.interfaces.SubinterfaceCounters
	14, // 6: zte.telemetry.interfaces.SubinterfaceInfo.subStatePeriod:type_name -> zte.telemetry.interfaces.SubStatePeriodInfo
	0,  // 7: zte.telemetry.interfaces.InterfaceState.admin_status:type_name -> zte.telemetry.interfaces.AdminStatus
	1,  // 8: zte.telemetry.interfaces.InterfaceState.oper_status:type_name -> zte.telemetry.interfaces.OperStatus
	4,  // 9: zte.telemetry.interfaces.InterfaceState.phy_status:type_name -> zte.telemetry.interfaces.InterfaceState.PhyStatus
	2,  // 10: zte.telemetry.interfaces.InterfaceState.ipv4_oper_status:type_name -> zte.telemetry.interfaces.IPv4OperStatus
	0,  // 11: zte.telemetry.interfaces.SubinterfaceState.admin_status:type_name -> zte.telemetry.interfaces.AdminStatus
	1,  // 12: zte.telemetry.interfaces.SubinterfaceState.oper_status:type_name -> zte.telemetry.interfaces.OperStatus
	2,  // 13: zte.telemetry.interfaces.SubinterfaceState.ipv4_oper_status:type_name -> zte.telemetry.interfaces.IPv4OperStatus
	0,  // 14: zte.telemetry.interfaces.StatePeriodInfo.admin_status:type_name -> zte.telemetry.interfaces.AdminStatus
	1,  // 15: zte.telemetry.interfaces.StatePeriodInfo.oper_status:type_name -> zte.telemetry.interfaces.OperStatus
	5,  // 16: zte.telemetry.interfaces.StatePeriodInfo.phy_status:type_name -> zte.telemetry.interfaces.StatePeriodInfo.PhyStatus
	2,  // 17: zte.telemetry.interfaces.StatePeriodInfo.ipv4_oper_status:type_name -> zte.telemetry.interfaces.IPv4OperStatus
	3,  // 18: zte.telemetry.interfaces.StatePeriodInfo.ipv6_oper_status:type_name -> zte.telemetry.interfaces.IPv6OperStatus
	0,  // 19: zte.telemetry.interfaces.SubStatePeriodInfo.admin_status:type_name -> zte.telemetry.interfaces.AdminStatus
	1,  // 20: zte.telemetry.interfaces.SubStatePeriodInfo.oper_status:type_name -> zte.telemetry.interfaces.OperStatus
	6,  // 21: zte.telemetry.interfaces.SubStatePeriodInfo.phy_status:type_name -> zte.telemetry.interfaces.SubStatePeriodInfo.PhyStatus
	2,  // 22: zte.telemetry.interfaces.SubStatePeriodInfo.ipv4_oper_status:type_name -> zte.telemetry.interfaces.IPv4OperStatus
	3,  // 23: zte.telemetry.interfaces.SubStatePeriodInfo.ipv6_oper_status:type_name -> zte.telemetry.interfaces.IPv6OperStatus
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_zxr10_interfaces_zxr10_interfaces_proto_init() }
func file_zxr10_interfaces_zxr10_interfaces_proto_init() {
	if File_zxr10_interfaces_zxr10_interfaces_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*InterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SubinterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*InterfaceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SubinterfaceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*InterfaceCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SubinterfaceCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*StatePeriodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SubStatePeriodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zxr10_interfaces_zxr10_interfaces_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zxr10_interfaces_zxr10_interfaces_proto_goTypes,
		DependencyIndexes: file_zxr10_interfaces_zxr10_interfaces_proto_depIdxs,
		EnumInfos:         file_zxr10_interfaces_zxr10_interfaces_proto_enumTypes,
		MessageInfos:      file_zxr10_interfaces_zxr10_interfaces_proto_msgTypes,
	}.Build()
	File_zxr10_interfaces_zxr10_interfaces_proto = out.File
	file_zxr10_interfaces_zxr10_interfaces_proto_rawDesc = nil
	file_zxr10_interfaces_zxr10_interfaces_proto_goTypes = nil
	file_zxr10_interfaces_zxr10_interfaces_proto_depIdxs = nil
}
