//************************************************************************************
// Copyright (C) 2018-2022  ZTE Corporation.  All rights reserved.                   *
//************************************************************************************
// Description:                                                                      *
//    This proto defines a schema for ALARM (Connectivity Fault Management)            *
//                                                                                   *
//************************************************************************************
// Organization:                                                                     *
//   ZTE Corporation                                                                 *
//************************************************************************************
// Contact:                                                                          *
//    ZTE Corporation                                                                *
//    Nanjing Institute of ZTE Corporation                                           *
//"    No.68 Zijinghua Rd. Yuhuatai District, Nanjing, China                          *
//    Tel: +86-25-52870000                                                           *
//************************************************************************************
// version:                                                                          *
//    1st edition 2022-12-12                                                         *
//***********************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.32.0
// source: zxr10_alarm/zxr10_alarm.proto

package zxr10_alarm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ********************************************************************************************************************
// Description:                                                                                                      *
//
//	The following messages defines for information of ALARM                                                        *
//	                                                                                                               *
//
// Subscription info:                                                                                                *
//
//	sensor-path:alm:current-alarm-report                                                                           *
//	sensor-path:alm:notification-report                                                                            *
//
// *******************************************************************************************************************
type AlarmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current alarm report
	AlarmReport []*CurrentAlarm `protobuf:"bytes,1,rep,name=alarm_report,json=alarmReport,proto3" json:"alarm_report,omitempty"` // 当前告警上报信息
	// notification report
	NotificationReport []*Notification `protobuf:"bytes,2,rep,name=notification_report,json=notificationReport,proto3" json:"notification_report,omitempty"` // 通知上报信息
}

func (x *AlarmInfo) Reset() {
	*x = AlarmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_alarm_zxr10_alarm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmInfo) ProtoMessage() {}

func (x *AlarmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_alarm_zxr10_alarm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmInfo.ProtoReflect.Descriptor instead.
func (*AlarmInfo) Descriptor() ([]byte, []int) {
	return file_zxr10_alarm_zxr10_alarm_proto_rawDescGZIP(), []int{0}
}

func (x *AlarmInfo) GetAlarmReport() []*CurrentAlarm {
	if x != nil {
		return x.AlarmReport
	}
	return nil
}

func (x *AlarmInfo) GetNotificationReport() []*Notification {
	if x != nil {
		return x.NotificationReport
	}
	return nil
}

// *********************************************************************************************************************
// Description:                                                                                                       *
//
//	The following messages defines for alarm report                                                                 *
//	                                                                                                                *
//
// Subscription info:                                                                                                 *
//
//	sensor-path:alm:current-alarm-report                                                                            *
//
// ********************************************************************************************************************
type CurrentAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flow-id. Key filed
	FlowId uint32 `protobuf:"varint,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` // 告警流水号,Key filed
	// timestamp. Key filed
	Timestamp uint32 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳，和告警流水号一起唯一确定一条告警,Key filed
	// code
	Code uint32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"` // 告警码
	// occurrence-time
	OccurrenceTime uint32 `protobuf:"varint,4,opt,name=occurrence_time,json=occurrenceTime,proto3" json:"occurrence_time,omitempty"` // 告警产生时间，自1970-1-1 00:00:00以来的秒数，UTC时间
	// update-time
	UpdateTime uint32 `protobuf:"varint,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // 告警更新时间。自1970-1-1 00:00:00以来的秒数，UTC时间
	// disappeared-time
	DisappearedTime uint32 `protobuf:"varint,6,opt,name=disappeared_time,json=disappearedTime,proto3" json:"disappeared_time,omitempty"` // 告警消失时间。自1970-1-1 00:00:00以来的秒数，UTC时间
	// occurrence-ms
	OccurrenceMs uint32 `protobuf:"varint,7,opt,name=occurrence_ms,json=occurrenceMs,proto3" json:"occurrence_ms,omitempty"` // 告警产生毫秒数。当告警状态为产生时有效
	// update-ms
	UpdateMs uint32 `protobuf:"varint,8,opt,name=update_ms,json=updateMs,proto3" json:"update_ms,omitempty"` // 告警更新毫秒数。当告警状态为更新时有效
	// disappeared-ms
	DisappearedMs uint32 `protobuf:"varint,9,opt,name=disappeared_ms,json=disappearedMs,proto3" json:"disappeared_ms,omitempty"` // 告警消失毫秒数。当告警状态为消失时有效
	// alarm-class
	AlarmClass string `protobuf:"bytes,10,opt,name=alarm_class,json=alarmClass,proto3" json:"alarm_class,omitempty"` // 告警类型
	// alarm-type
	AlarmType string `protobuf:"bytes,11,opt,name=alarm_type,json=alarmType,proto3" json:"alarm_type,omitempty"` // 告警大类
	// alarm-status
	AlarmStatus string `protobuf:"bytes,12,opt,name=alarm_status,json=alarmStatus,proto3" json:"alarm_status,omitempty"` // 告警状态
	// sort
	Sort uint32 `protobuf:"varint,13,opt,name=sort,proto3" json:"sort,omitempty"` // 告警种类
	// severity
	Severity string `protobuf:"bytes,14,opt,name=severity,proto3" json:"severity,omitempty"` // 告警严重性等级
	// tpid-type
	TpidType uint32 `protobuf:"varint,15,opt,name=tpid_type,json=tpidType,proto3" json:"tpid_type,omitempty"` // 上报告警的检测点类型
	// tpid-length
	TpidLength uint32 `protobuf:"varint,16,opt,name=tpid_length,json=tpidLength,proto3" json:"tpid_length,omitempty"` // 上报告警的检测点长度
	// tpid
	Tpid []byte `protobuf:"bytes,17,opt,name=tpid,proto3" json:"tpid,omitempty"` // 上报告警的检测点
	// protect-group-work-status
	ProtectGroupWorkStatus uint32 `protobuf:"varint,18,opt,name=protect_group_work_status,json=protectGroupWorkStatus,proto3" json:"protect_group_work_status,omitempty"` // 保护组工作状态
	// protect-type
	ProtectType uint32 `protobuf:"varint,19,opt,name=protect_type,json=protectType,proto3" json:"protect_type,omitempty"` // 保护类型
	// reason
	Reason uint32 `protobuf:"varint,20,opt,name=reason,proto3" json:"reason,omitempty"` // 事件原因
	// return-mode
	ReturnMode string `protobuf:"bytes,21,opt,name=return_mode,json=returnMode,proto3" json:"return_mode,omitempty"` // 倒换事件的返回模式
	// protect-tpid-type
	ProtectTpidType uint32 `protobuf:"varint,22,opt,name=protect_tpid_type,json=protectTpidType,proto3" json:"protect_tpid_type,omitempty"` // 保护检测点类型
	// protect-tpid-length
	ProtectTpidLength uint32 `protobuf:"varint,23,opt,name=protect_tpid_length,json=protectTpidLength,proto3" json:"protect_tpid_length,omitempty"` // 保护检测点长度
	// protect-tpid
	ProtectTpid []byte `protobuf:"bytes,24,opt,name=protect_tpid,json=protectTpid,proto3" json:"protect_tpid,omitempty"` // 保护检测点，即保护组
	// source-tpid-type
	SourceTpidType uint32 `protobuf:"varint,25,opt,name=source_tpid_type,json=sourceTpidType,proto3" json:"source_tpid_type,omitempty"` // 告警的来源检测点类型
	// source-tpid-length
	SourceTpidLength uint32 `protobuf:"varint,26,opt,name=source_tpid_length,json=sourceTpidLength,proto3" json:"source_tpid_length,omitempty"` // 告警的来源检测点长度
	// source-tpid
	SourceTpid []byte `protobuf:"bytes,27,opt,name=source_tpid,json=sourceTpid,proto3" json:"source_tpid,omitempty"` // 告警的来源检测点
	// swtich-tpid-type
	SwtichTpidType uint32 `protobuf:"varint,28,opt,name=swtich_tpid_type,json=swtichTpidType,proto3" json:"swtich_tpid_type,omitempty"` // 被保护的检测点类型
	// previous-tpid-length
	PreviousTpidLength uint32 `protobuf:"varint,29,opt,name=previous_tpid_length,json=previousTpidLength,proto3" json:"previous_tpid_length,omitempty"` // 倒换前的检测点长度
	// current-tpid-length
	CurrentTpidLength uint32 `protobuf:"varint,30,opt,name=current_tpid_length,json=currentTpidLength,proto3" json:"current_tpid_length,omitempty"` // 倒换到的检测点长度
	// previous-tpid
	PreviousTpid []byte `protobuf:"bytes,31,opt,name=previous_tpid,json=previousTpid,proto3" json:"previous_tpid,omitempty"` // 倒换前的检测点
	// current-tpid
	CurrentTpid []byte `protobuf:"bytes,32,opt,name=current_tpid,json=currentTpid,proto3" json:"current_tpid,omitempty"` // 当前的检测点，即倒换到的检测点
	// perf-alarm-period
	PerfAlarmPeriod string `protobuf:"bytes,33,opt,name=perf_alarm_period,json=perfAlarmPeriod,proto3" json:"perf_alarm_period,omitempty"` // 表示15（5）分钟还是24小时越限告警
	// perf-alarm-type
	PerfAlarmType string `protobuf:"bytes,34,opt,name=perf_alarm_type,json=perfAlarmType,proto3" json:"perf_alarm_type,omitempty"` // 性能越限告警类型，如：高门限越限、高预警越限等
	// perf-alarm-value
	PerfAlarmValue []byte `protobuf:"bytes,35,opt,name=perf_alarm_value,json=perfAlarmValue,proto3" json:"perf_alarm_value,omitempty"` // 越限告警产生时的性能值，采用10字节的科学计数法
	// description
	Description string `protobuf:"bytes,36,opt,name=description,proto3" json:"description,omitempty"` // 告警描述字符串
	// caption
	Caption string `protobuf:"bytes,37,opt,name=caption,proto3" json:"caption,omitempty"` // 告警标题和告警描述一起构成完整的告警说明
}

func (x *CurrentAlarm) Reset() {
	*x = CurrentAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_alarm_zxr10_alarm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentAlarm) ProtoMessage() {}

func (x *CurrentAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_alarm_zxr10_alarm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentAlarm.ProtoReflect.Descriptor instead.
func (*CurrentAlarm) Descriptor() ([]byte, []int) {
	return file_zxr10_alarm_zxr10_alarm_proto_rawDescGZIP(), []int{1}
}

func (x *CurrentAlarm) GetFlowId() uint32 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *CurrentAlarm) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CurrentAlarm) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CurrentAlarm) GetOccurrenceTime() uint32 {
	if x != nil {
		return x.OccurrenceTime
	}
	return 0
}

func (x *CurrentAlarm) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *CurrentAlarm) GetDisappearedTime() uint32 {
	if x != nil {
		return x.DisappearedTime
	}
	return 0
}

func (x *CurrentAlarm) GetOccurrenceMs() uint32 {
	if x != nil {
		return x.OccurrenceMs
	}
	return 0
}

func (x *CurrentAlarm) GetUpdateMs() uint32 {
	if x != nil {
		return x.UpdateMs
	}
	return 0
}

func (x *CurrentAlarm) GetDisappearedMs() uint32 {
	if x != nil {
		return x.DisappearedMs
	}
	return 0
}

func (x *CurrentAlarm) GetAlarmClass() string {
	if x != nil {
		return x.AlarmClass
	}
	return ""
}

func (x *CurrentAlarm) GetAlarmType() string {
	if x != nil {
		return x.AlarmType
	}
	return ""
}

func (x *CurrentAlarm) GetAlarmStatus() string {
	if x != nil {
		return x.AlarmStatus
	}
	return ""
}

func (x *CurrentAlarm) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CurrentAlarm) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *CurrentAlarm) GetTpidType() uint32 {
	if x != nil {
		return x.TpidType
	}
	return 0
}

func (x *CurrentAlarm) GetTpidLength() uint32 {
	if x != nil {
		return x.TpidLength
	}
	return 0
}

func (x *CurrentAlarm) GetTpid() []byte {
	if x != nil {
		return x.Tpid
	}
	return nil
}

func (x *CurrentAlarm) GetProtectGroupWorkStatus() uint32 {
	if x != nil {
		return x.ProtectGroupWorkStatus
	}
	return 0
}

func (x *CurrentAlarm) GetProtectType() uint32 {
	if x != nil {
		return x.ProtectType
	}
	return 0
}

func (x *CurrentAlarm) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *CurrentAlarm) GetReturnMode() string {
	if x != nil {
		return x.ReturnMode
	}
	return ""
}

func (x *CurrentAlarm) GetProtectTpidType() uint32 {
	if x != nil {
		return x.ProtectTpidType
	}
	return 0
}

func (x *CurrentAlarm) GetProtectTpidLength() uint32 {
	if x != nil {
		return x.ProtectTpidLength
	}
	return 0
}

func (x *CurrentAlarm) GetProtectTpid() []byte {
	if x != nil {
		return x.ProtectTpid
	}
	return nil
}

func (x *CurrentAlarm) GetSourceTpidType() uint32 {
	if x != nil {
		return x.SourceTpidType
	}
	return 0
}

func (x *CurrentAlarm) GetSourceTpidLength() uint32 {
	if x != nil {
		return x.SourceTpidLength
	}
	return 0
}

func (x *CurrentAlarm) GetSourceTpid() []byte {
	if x != nil {
		return x.SourceTpid
	}
	return nil
}

func (x *CurrentAlarm) GetSwtichTpidType() uint32 {
	if x != nil {
		return x.SwtichTpidType
	}
	return 0
}

func (x *CurrentAlarm) GetPreviousTpidLength() uint32 {
	if x != nil {
		return x.PreviousTpidLength
	}
	return 0
}

func (x *CurrentAlarm) GetCurrentTpidLength() uint32 {
	if x != nil {
		return x.CurrentTpidLength
	}
	return 0
}

func (x *CurrentAlarm) GetPreviousTpid() []byte {
	if x != nil {
		return x.PreviousTpid
	}
	return nil
}

func (x *CurrentAlarm) GetCurrentTpid() []byte {
	if x != nil {
		return x.CurrentTpid
	}
	return nil
}

func (x *CurrentAlarm) GetPerfAlarmPeriod() string {
	if x != nil {
		return x.PerfAlarmPeriod
	}
	return ""
}

func (x *CurrentAlarm) GetPerfAlarmType() string {
	if x != nil {
		return x.PerfAlarmType
	}
	return ""
}

func (x *CurrentAlarm) GetPerfAlarmValue() []byte {
	if x != nil {
		return x.PerfAlarmValue
	}
	return nil
}

func (x *CurrentAlarm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CurrentAlarm) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

// *********************************************************************************************************************
// Description:                                                                                                       *
//
//	The following messages defines for report notification                                                          *
//	                                                                                                                *
//
// Subscription info:                                                                                                 *
//
//	sensor-path:alm:notification-report                                                                             *
//
// ********************************************************************************************************************
type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flow-id. Key filed
	FlowId uint32 `protobuf:"varint,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` // 告警流水号,Key filed
	// timestamp. Key filed
	Timestamp uint32 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳，和告警流水号一起唯一确定一条告警,Key filed
	// code
	Code uint32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"` // 告警码
	// occur-time
	OccurTime uint32 `protobuf:"varint,4,opt,name=occur_time,json=occurTime,proto3" json:"occur_time,omitempty"` // 告警产生时间，自1970-1-1 00:00:00以来的秒数，UTC时间
	// occur-ms
	OccurMs uint32 `protobuf:"varint,5,opt,name=occur_ms,json=occurMs,proto3" json:"occur_ms,omitempty"` // 告警产生毫秒数
	// classification
	Classification string `protobuf:"bytes,6,opt,name=classification,proto3" json:"classification,omitempty"` // 告警大类
	// sort
	Sort uint32 `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"` // 告警种类
	// severity
	Severity string `protobuf:"bytes,8,opt,name=severity,proto3" json:"severity,omitempty"` // 告警严重性等级
	// tpid-type
	TpidType uint32 `protobuf:"varint,9,opt,name=tpid_type,json=tpidType,proto3" json:"tpid_type,omitempty"` // 上报告警的检测点类型
	// tpid-length
	TpidLength uint32 `protobuf:"varint,10,opt,name=tpid_length,json=tpidLength,proto3" json:"tpid_length,omitempty"` // 上报告警的检测点长度
	// tpid
	Tpid []byte `protobuf:"bytes,11,opt,name=tpid,proto3" json:"tpid,omitempty"` // 上报告警的检测点
	// description
	Description string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"` // 描述字符串
	// caption
	Caption string `protobuf:"bytes,13,opt,name=caption,proto3" json:"caption,omitempty"` // 通知标题。标题和描述一起构成完整的通知说明
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zxr10_alarm_zxr10_alarm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_zxr10_alarm_zxr10_alarm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_zxr10_alarm_zxr10_alarm_proto_rawDescGZIP(), []int{2}
}

func (x *Notification) GetFlowId() uint32 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Notification) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Notification) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Notification) GetOccurTime() uint32 {
	if x != nil {
		return x.OccurTime
	}
	return 0
}

func (x *Notification) GetOccurMs() uint32 {
	if x != nil {
		return x.OccurMs
	}
	return 0
}

func (x *Notification) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *Notification) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Notification) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Notification) GetTpidType() uint32 {
	if x != nil {
		return x.TpidType
	}
	return 0
}

func (x *Notification) GetTpidLength() uint32 {
	if x != nil {
		return x.TpidLength
	}
	return 0
}

func (x *Notification) GetTpid() []byte {
	if x != nil {
		return x.Tpid
	}
	return nil
}

func (x *Notification) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Notification) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

var File_zxr10_alarm_zxr10_alarm_proto protoreflect.FileDescriptor

var file_zxr10_alarm_zxr10_alarm_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x7a, 0x78, 0x72, 0x31, 0x30, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x7a, 0x78,
	0x72, 0x31, 0x30, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0b, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xb9, 0x0a, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69,
	0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x65, 0x64, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x70, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x70,
	0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x70, 0x69,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x6f, 0x72, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x70,
	0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x54, 0x70, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x54, 0x70, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x54, 0x70, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x70, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x70, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x70, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x77,
	0x74, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x77, 0x74, 0x69, 0x63, 0x68, 0x54, 0x70, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x70, 0x69, 0x64,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x70, 0x69, 0x64,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x70, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x66, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x65,
	0x72, 0x66, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x5f, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x4d, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x70, 0x69, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x70, 0x69, 0x64, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x77, 0x77, 0x73, 0x77, 0x77, 0x73, 0x75, 0x6e, 0x73, 0x2f, 0x7a, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x7a, 0x78, 0x72, 0x31, 0x30, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zxr10_alarm_zxr10_alarm_proto_rawDescOnce sync.Once
	file_zxr10_alarm_zxr10_alarm_proto_rawDescData = file_zxr10_alarm_zxr10_alarm_proto_rawDesc
)

func file_zxr10_alarm_zxr10_alarm_proto_rawDescGZIP() []byte {
	file_zxr10_alarm_zxr10_alarm_proto_rawDescOnce.Do(func() {
		file_zxr10_alarm_zxr10_alarm_proto_rawDescData = protoimpl.X.CompressGZIP(file_zxr10_alarm_zxr10_alarm_proto_rawDescData)
	})
	return file_zxr10_alarm_zxr10_alarm_proto_rawDescData
}

var file_zxr10_alarm_zxr10_alarm_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_zxr10_alarm_zxr10_alarm_proto_goTypes = []any{
	(*AlarmInfo)(nil),    // 0: zte.telemetry.alarm.AlarmInfo
	(*CurrentAlarm)(nil), // 1: zte.telemetry.alarm.CurrentAlarm
	(*Notification)(nil), // 2: zte.telemetry.alarm.Notification
}
var file_zxr10_alarm_zxr10_alarm_proto_depIdxs = []int32{
	1, // 0: zte.telemetry.alarm.AlarmInfo.alarm_report:type_name -> zte.telemetry.alarm.CurrentAlarm
	2, // 1: zte.telemetry.alarm.AlarmInfo.notification_report:type_name -> zte.telemetry.alarm.Notification
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_zxr10_alarm_zxr10_alarm_proto_init() }
func file_zxr10_alarm_zxr10_alarm_proto_init() {
	if File_zxr10_alarm_zxr10_alarm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zxr10_alarm_zxr10_alarm_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AlarmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zxr10_alarm_zxr10_alarm_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zxr10_alarm_zxr10_alarm_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zxr10_alarm_zxr10_alarm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zxr10_alarm_zxr10_alarm_proto_goTypes,
		DependencyIndexes: file_zxr10_alarm_zxr10_alarm_proto_depIdxs,
		MessageInfos:      file_zxr10_alarm_zxr10_alarm_proto_msgTypes,
	}.Build()
	File_zxr10_alarm_zxr10_alarm_proto = out.File
	file_zxr10_alarm_zxr10_alarm_proto_rawDesc = nil
	file_zxr10_alarm_zxr10_alarm_proto_goTypes = nil
	file_zxr10_alarm_zxr10_alarm_proto_depIdxs = nil
}
