//************************************************************************************
// Copyright (C) 2018-2020  ZTE Corporation.  All rights reserved.                   *
//************************************************************************************
// Description:                                                                      *
//    This proto defines a schema for ZTE dialin                                     *
//                                                                                   *
//************************************************************************************
// Organization:                                                                     *
//   ZTE Corporation                                                                 *
//************************************************************************************
// Contact:                                                                          *
//    ZTE Corporation                                                                *
//    Nanjing Institute of ZTE Corporation                                           *
//"    No.68 Zijinghua Rd. Yuhuatai District, Nanjing, China                          *
//    Tel: +86-25-52870000                                                           *
//************************************************************************************
// version:                                                                          *
//    1st edition 2020-01-20                                                         *
//    2st edition 2021-10-30                                                         *
//***********************************************************************************

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: zte_dialout/zte_dialout.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ZtedialoutService_Publish_FullMethodName = "/zte.dialout.ztedialoutService/Publish"
)

// ZtedialoutServiceClient is the client API for ZtedialoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZtedialoutServiceClient interface {
	//主动推送rpc方法定义，用于Telemetry推送采样数据。
	Publish(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PublishArgs, PublishArgs], error)
}

type ztedialoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZtedialoutServiceClient(cc grpc.ClientConnInterface) ZtedialoutServiceClient {
	return &ztedialoutServiceClient{cc}
}

func (c *ztedialoutServiceClient) Publish(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PublishArgs, PublishArgs], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ZtedialoutService_ServiceDesc.Streams[0], ZtedialoutService_Publish_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PublishArgs, PublishArgs]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ZtedialoutService_PublishClient = grpc.BidiStreamingClient[PublishArgs, PublishArgs]

// ZtedialoutServiceServer is the server API for ZtedialoutService service.
// All implementations must embed UnimplementedZtedialoutServiceServer
// for forward compatibility.
type ZtedialoutServiceServer interface {
	//主动推送rpc方法定义，用于Telemetry推送采样数据。
	Publish(grpc.BidiStreamingServer[PublishArgs, PublishArgs]) error
	mustEmbedUnimplementedZtedialoutServiceServer()
}

// UnimplementedZtedialoutServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedZtedialoutServiceServer struct{}

func (UnimplementedZtedialoutServiceServer) Publish(grpc.BidiStreamingServer[PublishArgs, PublishArgs]) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedZtedialoutServiceServer) mustEmbedUnimplementedZtedialoutServiceServer() {}
func (UnimplementedZtedialoutServiceServer) testEmbeddedByValue()                           {}

// UnsafeZtedialoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZtedialoutServiceServer will
// result in compilation errors.
type UnsafeZtedialoutServiceServer interface {
	mustEmbedUnimplementedZtedialoutServiceServer()
}

func RegisterZtedialoutServiceServer(s grpc.ServiceRegistrar, srv ZtedialoutServiceServer) {
	// If the following call pancis, it indicates UnimplementedZtedialoutServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ZtedialoutService_ServiceDesc, srv)
}

func _ZtedialoutService_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZtedialoutServiceServer).Publish(&grpc.GenericServerStream[PublishArgs, PublishArgs]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ZtedialoutService_PublishServer = grpc.BidiStreamingServer[PublishArgs, PublishArgs]

// ZtedialoutService_ServiceDesc is the grpc.ServiceDesc for ZtedialoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZtedialoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zte.dialout.ztedialoutService",
	HandlerType: (*ZtedialoutServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _ZtedialoutService_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "zte_dialout/zte_dialout.proto",
}
