//************************************************************************************
// Copyright (C) 2018-2020  ZTE Corporation.  All rights reserved.                   *
//************************************************************************************
// Description:                                                                      *
//    This proto defines a schema for platform                                       *
//                                                                                   *
//************************************************************************************
// Organization:                                                                     *
//   ZTE Corporation                                                                 *
//************************************************************************************
// Contact:                                                                          *
//    ZTE Corporation                                                                *
//    Nanjing Institute of ZTE Corporation                                           *
//"    No.68 Zijinghua Rd. Yuhuatai District, Nanjing, China                          *
//    Tel: +86-25-52870000                                                           *
//************************************************************************************
// version:                                                                          *
//    1st edition 2020-08-20                                                         *
//***********************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.32.0
// source: openconfig_platform/openconfig_platform.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlarmStatus int32

const (
	AlarmStatus_INVALID AlarmStatus = 0
	AlarmStatus_NORMAL  AlarmStatus = 1
	AlarmStatus_ALARM   AlarmStatus = 2
)

// Enum value maps for AlarmStatus.
var (
	AlarmStatus_name = map[int32]string{
		0: "INVALID",
		1: "NORMAL",
		2: "ALARM",
	}
	AlarmStatus_value = map[string]int32{
		"INVALID": 0,
		"NORMAL":  1,
		"ALARM":   2,
	}
)

func (x AlarmStatus) Enum() *AlarmStatus {
	p := new(AlarmStatus)
	*p = x
	return p
}

func (x AlarmStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openconfig_platform_openconfig_platform_proto_enumTypes[0].Descriptor()
}

func (AlarmStatus) Type() protoreflect.EnumType {
	return &file_openconfig_platform_openconfig_platform_proto_enumTypes[0]
}

func (x AlarmStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmStatus.Descriptor instead.
func (AlarmStatus) EnumDescriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{0}
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for component                                   *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path:                                                                   *
//
// ***********************************************************************************
type ComponentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Component Name, Key field
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` //组件名称，不同组件的命令格式不同，例如：单板名称为PFU-0/1/0，端口名称为xgei-0/1/0/1等等。
	// Common state informaion
	CommonState *CommonState `protobuf:"bytes,2,opt,name=common_state,json=commonState,proto3" json:"common_state,omitempty"` //组件通用状态信息
	// Temperature alarm data for platform components
	TempInfo *Temperature `protobuf:"bytes,3,opt,name=temp_info,json=tempInfo,proto3" json:"temp_info,omitempty"` //组件温度及告警信息
	// Associated memory of the component
	MemInfo *MemoryInfo `protobuf:"bytes,4,opt,name=mem_info,json=memInfo,proto3" json:"mem_info,omitempty"` //内存相关信息
	// Cpu utilization of the component
	CpuInfo *CpuInfo `protobuf:"bytes,5,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"` //组件的cpu利用率等信息
	// Power administrate state of the linecard component
	PowerAdminState *LinecardInfo `protobuf:"bytes,6,opt,name=power_admin_state,json=powerAdminState,proto3" json:"power_admin_state,omitempty"` //线卡组件的供电状态
	// Fan information of the component
	FanInfo *FanInfo `protobuf:"bytes,7,opt,name=fan_info,json=fanInfo,proto3" json:"fan_info,omitempty"` //风扇组件信息
	// Power information of the component
	PowerInfo *PowerInfo `protobuf:"bytes,8,opt,name=power_info,json=powerInfo,proto3" json:"power_info,omitempty"` //电源组件信息
	// storage information of the component
	StorageInfo *StorageInfo `protobuf:"bytes,9,opt,name=storage_info,json=storageInfo,proto3" json:"storage_info,omitempty"` //存储器信息
	// optical information of the component
	OpticalInfo *OpticalInfo `protobuf:"bytes,10,opt,name=optical_info,json=opticalInfo,proto3" json:"optical_info,omitempty"` //光模块信息
	// optical channel information of the component
	OpticalchanInfo []*OptChanInfo `protobuf:"bytes,11,rep,name=opticalchan_info,json=opticalchanInfo,proto3" json:"opticalchan_info,omitempty"` //光通道信息,子消息带key要用repeated
}

func (x *ComponentInfo) Reset() {
	*x = ComponentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentInfo) ProtoMessage() {}

func (x *ComponentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentInfo.ProtoReflect.Descriptor instead.
func (*ComponentInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{0}
}

func (x *ComponentInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentInfo) GetCommonState() *CommonState {
	if x != nil {
		return x.CommonState
	}
	return nil
}

func (x *ComponentInfo) GetTempInfo() *Temperature {
	if x != nil {
		return x.TempInfo
	}
	return nil
}

func (x *ComponentInfo) GetMemInfo() *MemoryInfo {
	if x != nil {
		return x.MemInfo
	}
	return nil
}

func (x *ComponentInfo) GetCpuInfo() *CpuInfo {
	if x != nil {
		return x.CpuInfo
	}
	return nil
}

func (x *ComponentInfo) GetPowerAdminState() *LinecardInfo {
	if x != nil {
		return x.PowerAdminState
	}
	return nil
}

func (x *ComponentInfo) GetFanInfo() *FanInfo {
	if x != nil {
		return x.FanInfo
	}
	return nil
}

func (x *ComponentInfo) GetPowerInfo() *PowerInfo {
	if x != nil {
		return x.PowerInfo
	}
	return nil
}

func (x *ComponentInfo) GetStorageInfo() *StorageInfo {
	if x != nil {
		return x.StorageInfo
	}
	return nil
}

func (x *ComponentInfo) GetOpticalInfo() *OpticalInfo {
	if x != nil {
		return x.OpticalInfo
	}
	return nil
}

func (x *ComponentInfo) GetOpticalchanInfo() []*OptChanInfo {
	if x != nil {
		return x.OpticalchanInfo
	}
	return nil
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for common state of the component               *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]/state                      *
//
// ***********************************************************************************
type CommonState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current operational status of the component
	OperStatus string `protobuf:"bytes,1,opt,name=oper_status,json=operStatus,proto3" json:"oper_status,omitempty"` //组件操作状态，激活、非激活或未使能
	// Uptime of the component
	Uptime uint32 `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"` //组件上电时间，单位：秒
	// Actual power used by the component
	UsedPower uint32 `protobuf:"varint,3,opt,name=used_power,json=usedPower,proto3" json:"used_power,omitempty"` //组件已用功率，单位：瓦
	// Actual power by the component
	AllocatedPower  uint32 `protobuf:"varint,4,opt,name=allocated_power,json=allocatedPower,proto3" json:"allocated_power,omitempty"`      //组件可用功率，单位：瓦
	CurrentVoltage  string `protobuf:"bytes,5,opt,name=current_voltage,json=currentVoltage,proto3" json:"current_voltage,omitempty"`       //组件工作电压
	CurrentCurrent  string `protobuf:"bytes,6,opt,name=current_current,json=currentCurrent,proto3" json:"current_current,omitempty"`       //组件工作电流
	TotalCapacity   string `protobuf:"bytes,7,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`          //组件工作可用功率，字符形式
	UsedCapacity    string `protobuf:"bytes,8,opt,name=used_capacity,json=usedCapacity,proto3" json:"used_capacity,omitempty"`             //组件工作已用功率，字符形式
	Type            string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`                                                 //组件工作类型
	RedundancyType  string `protobuf:"bytes,10,opt,name=redundancy_type,json=redundancyType,proto3" json:"redundancy_type,omitempty"`      //组件备份类型
	Modules         string `protobuf:"bytes,11,opt,name=modules,proto3" json:"modules,omitempty"`                                          //组件模块数
	TotalInputPower string `protobuf:"bytes,12,opt,name=total_input_power,json=totalInputPower,proto3" json:"total_input_power,omitempty"` //组件输入功率，单位：瓦
}

func (x *CommonState) Reset() {
	*x = CommonState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonState) ProtoMessage() {}

func (x *CommonState) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonState.ProtoReflect.Descriptor instead.
func (*CommonState) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{1}
}

func (x *CommonState) GetOperStatus() string {
	if x != nil {
		return x.OperStatus
	}
	return ""
}

func (x *CommonState) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *CommonState) GetUsedPower() uint32 {
	if x != nil {
		return x.UsedPower
	}
	return 0
}

func (x *CommonState) GetAllocatedPower() uint32 {
	if x != nil {
		return x.AllocatedPower
	}
	return 0
}

func (x *CommonState) GetCurrentVoltage() string {
	if x != nil {
		return x.CurrentVoltage
	}
	return ""
}

func (x *CommonState) GetCurrentCurrent() string {
	if x != nil {
		return x.CurrentCurrent
	}
	return ""
}

func (x *CommonState) GetTotalCapacity() string {
	if x != nil {
		return x.TotalCapacity
	}
	return ""
}

func (x *CommonState) GetUsedCapacity() string {
	if x != nil {
		return x.UsedCapacity
	}
	return ""
}

func (x *CommonState) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CommonState) GetRedundancyType() string {
	if x != nil {
		return x.RedundancyType
	}
	return ""
}

func (x *CommonState) GetModules() string {
	if x != nil {
		return x.Modules
	}
	return ""
}

func (x *CommonState) GetTotalInputPower() string {
	if x != nil {
		return x.TotalInputPower
	}
	return ""
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for temperature                                 *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]/state/temperature          *
//
// ***********************************************************************************
type Temperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instantaneous value of temperature
	Instant float32 `protobuf:"fixed32,1,opt,name=instant,proto3" json:"instant,omitempty"` //实时温度，单位：摄氏度
	// The arithmetic mean value of temperature over the sampling period
	Avg float32 `protobuf:"fixed32,2,opt,name=avg,proto3" json:"avg,omitempty"` //interval时间内的平均温度，单位：摄氏度
	// The minimum value of temperature over the sampling period
	Min float32 `protobuf:"fixed32,3,opt,name=min,proto3" json:"min,omitempty"` //interval时间内的最低温度，单位：摄氏度
	// The maximum value of temperature over the sampling period
	Max float32 `protobuf:"fixed32,4,opt,name=max,proto3" json:"max,omitempty"` //interval时间内的最高温度，单位：摄氏度
	// The time interval over which the min/max/average statistics are computed by the system
	Interval uint64 `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"` //统计时间间隔，单位：纳秒
	// The absolute time at which the minimum value occurred.
	MinTime uint64 `protobuf:"varint,6,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"` //最小值发生的时间，单位：纳秒，从1970.1.1 00:00:00开始计算的相对时间)
	// The absolute time at which the maximum value occurred.
	MaxTime uint64 `protobuf:"varint,7,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"` //最大值发生的时间，单位：纳秒，从1970.1.1 00:00:00开始计算的相对时间)
	// The alarm raised or asserted
	AlarmStatus bool `protobuf:"varint,8,opt,name=alarm_status,json=alarmStatus,proto3" json:"alarm_status,omitempty"` //告警状态，是否有告警
	// The threhold of the alarm
	AlarmThreshold uint32 `protobuf:"varint,9,opt,name=alarm_threshold,json=alarmThreshold,proto3" json:"alarm_threshold,omitempty"` //告警门限，单位：摄氏度
	// The severity of the current alarm
	AlarmSeverity string `protobuf:"bytes,10,opt,name=alarm_severity,json=alarmSeverity,proto3" json:"alarm_severity,omitempty"` //告警级别
	// The severity of the current alarm
	MinorThreshold uint32 `protobuf:"varint,11,opt,name=minor_threshold,json=minorThreshold,proto3" json:"minor_threshold,omitempty"` //minor阈值
	// The severity of the current alarm
	MajorThreshold uint32 `protobuf:"varint,12,opt,name=major_threshold,json=majorThreshold,proto3" json:"major_threshold,omitempty"` //major阈值
	// The severity of the current alarm
	FatalThreshold uint32 `protobuf:"varint,13,opt,name=fatal_threshold,json=fatalThreshold,proto3" json:"fatal_threshold,omitempty"` //fatal阈值
	InstantString  string `protobuf:"bytes,14,opt,name=instant_string,json=instantString,proto3" json:"instant_string,omitempty"`     //实时温度,带符号，单位：摄氏度
	Status         string `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`                                        //测温点温度状态
	Description    string `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`                              //测温点描述
}

func (x *Temperature) Reset() {
	*x = Temperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Temperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temperature) ProtoMessage() {}

func (x *Temperature) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temperature.ProtoReflect.Descriptor instead.
func (*Temperature) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{2}
}

func (x *Temperature) GetInstant() float32 {
	if x != nil {
		return x.Instant
	}
	return 0
}

func (x *Temperature) GetAvg() float32 {
	if x != nil {
		return x.Avg
	}
	return 0
}

func (x *Temperature) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Temperature) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Temperature) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Temperature) GetMinTime() uint64 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

func (x *Temperature) GetMaxTime() uint64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *Temperature) GetAlarmStatus() bool {
	if x != nil {
		return x.AlarmStatus
	}
	return false
}

func (x *Temperature) GetAlarmThreshold() uint32 {
	if x != nil {
		return x.AlarmThreshold
	}
	return 0
}

func (x *Temperature) GetAlarmSeverity() string {
	if x != nil {
		return x.AlarmSeverity
	}
	return ""
}

func (x *Temperature) GetMinorThreshold() uint32 {
	if x != nil {
		return x.MinorThreshold
	}
	return 0
}

func (x *Temperature) GetMajorThreshold() uint32 {
	if x != nil {
		return x.MajorThreshold
	}
	return 0
}

func (x *Temperature) GetFatalThreshold() uint32 {
	if x != nil {
		return x.FatalThreshold
	}
	return 0
}

func (x *Temperature) GetInstantString() string {
	if x != nil {
		return x.InstantString
	}
	return ""
}

func (x *Temperature) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Temperature) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for memory                                      *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]                            *
//
// ***********************************************************************************
type MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The available memory physically installed, or logically allocated to the component.
	Available uint64 `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"` //组件分配的可用内存，单位：bytes
	// The currently used memory of the component
	Utilized uint64 `protobuf:"varint,2,opt,name=utilized,proto3" json:"utilized,omitempty"` //组件已使用的内存，单位：bytes
	// The currently used memory of the component
	Free uint64 `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"` //组件剩余的内存，单位：bytes
	// The currently used usage of the component
	Usage float32 `protobuf:"fixed32,4,opt,name=usage,proto3" json:"usage,omitempty"` //内存的使用率，单位：百分比
	// The currently used usage alarm status
	AlarmStatus AlarmStatus `protobuf:"varint,5,opt,name=alarm_status,json=alarmStatus,proto3,enum=zte.telemetry.platform.AlarmStatus" json:"alarm_status,omitempty"` //内存告警状态，是否有告警
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{3}
}

func (x *MemoryInfo) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *MemoryInfo) GetUtilized() uint64 {
	if x != nil {
		return x.Utilized
	}
	return 0
}

func (x *MemoryInfo) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *MemoryInfo) GetUsage() float32 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *MemoryInfo) GetAlarmStatus() AlarmStatus {
	if x != nil {
		return x.AlarmStatus
	}
	return AlarmStatus_INVALID
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for cpu usage                                   *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]                            *
//
// ***********************************************************************************
type CpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instantaneous value of the cpu usage
	Instant uint32 `protobuf:"varint,1,opt,name=instant,proto3" json:"instant,omitempty"` //cpu实时利用率，单位：百分比
	// The arithmetic mean value of the cpu usage over the sampling period
	Avg uint32 `protobuf:"varint,2,opt,name=avg,proto3" json:"avg,omitempty"` //interval时间内的平均cpu利用率，单位：百分比
	// The minimum value of the cpu usage over the sampling period
	Min uint32 `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"` //interval时间内的最低cpu利用率，单位：百分比
	// The maximum value of the cpu usage over the sampling period
	Max uint32 `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"` //interval时间内的最高cpu利用率，单位：百分比
	// The time interval over which the min/max/average statistics are computed by the system
	Interval uint64 `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"` //统计时间间隔，单位：纳秒
	// The absolute time at which the minimum value occurred.
	MinTime uint64 `protobuf:"varint,6,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"` //最小值发生的时间，单位：纳秒，从1970.1.1 00:00:00开始计算的相对时间)
	// The absolute time at which the maximum value occurred.
	MaxTime uint64 `protobuf:"varint,7,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"` //最大值发生的时间，单位：纳秒，从1970.1.1 00:00:00开始计算的相对时间)
	// The currently used CPU alarm status
	AlarmStatus AlarmStatus `protobuf:"varint,8,opt,name=alarm_status,json=alarmStatus,proto3,enum=zte.telemetry.platform.AlarmStatus" json:"alarm_status,omitempty"` //CPU告警状态，是否有告警
}

func (x *CpuInfo) Reset() {
	*x = CpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuInfo) ProtoMessage() {}

func (x *CpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuInfo.ProtoReflect.Descriptor instead.
func (*CpuInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{4}
}

func (x *CpuInfo) GetInstant() uint32 {
	if x != nil {
		return x.Instant
	}
	return 0
}

func (x *CpuInfo) GetAvg() uint32 {
	if x != nil {
		return x.Avg
	}
	return 0
}

func (x *CpuInfo) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CpuInfo) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CpuInfo) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *CpuInfo) GetMinTime() uint64 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

func (x *CpuInfo) GetMaxTime() uint64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *CpuInfo) GetAlarmStatus() AlarmStatus {
	if x != nil {
		return x.AlarmStatus
	}
	return AlarmStatus_INVALID
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for linecard information                        *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]/oc-linecard:linecard/state *
//
// ***********************************************************************************
type LinecardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable or disable power to the linecard
	PowerAdminState string `protobuf:"bytes,1,opt,name=power_admin_state,json=powerAdminState,proto3" json:"power_admin_state,omitempty"` //线卡供电状态
}

func (x *LinecardInfo) Reset() {
	*x = LinecardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinecardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinecardInfo) ProtoMessage() {}

func (x *LinecardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinecardInfo.ProtoReflect.Descriptor instead.
func (*LinecardInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{5}
}

func (x *LinecardInfo) GetPowerAdminState() string {
	if x != nil {
		return x.PowerAdminState
	}
	return ""
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for fan information                             *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]/oc-fan:fan/state           *
//
// ***********************************************************************************
type FanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current fan speed
	Speed uint32 `protobuf:"varint,1,opt,name=speed,proto3" json:"speed,omitempty"` //风扇速率，单位：rpm
	// Work state of the fan
	State          string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`                                         //风扇工作状态
	PhyStatus      string `protobuf:"bytes,3,opt,name=phy_status,json=phyStatus,proto3" json:"phy_status,omitempty"`                //风扇组在位状态
	WorkMode       string `protobuf:"bytes,4,opt,name=work_mode,json=workMode,proto3" json:"work_mode,omitempty"`                   //风扇组工作模式
	CurrentPower   string `protobuf:"bytes,5,opt,name=current_power,json=currentPower,proto3" json:"current_power,omitempty"`       //风扇组工作功率
	CurrentVoltage string `protobuf:"bytes,6,opt,name=current_voltage,json=currentVoltage,proto3" json:"current_voltage,omitempty"` //风扇组工作电压
	CurrentCurrent string `protobuf:"bytes,7,opt,name=current_current,json=currentCurrent,proto3" json:"current_current,omitempty"` //风扇组工作电流
	SpeedPercent   string `protobuf:"bytes,8,opt,name=speed_percent,json=speedPercent,proto3" json:"speed_percent,omitempty"`       //风扇速率比
}

func (x *FanInfo) Reset() {
	*x = FanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanInfo) ProtoMessage() {}

func (x *FanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanInfo.ProtoReflect.Descriptor instead.
func (*FanInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{6}
}

func (x *FanInfo) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *FanInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FanInfo) GetPhyStatus() string {
	if x != nil {
		return x.PhyStatus
	}
	return ""
}

func (x *FanInfo) GetWorkMode() string {
	if x != nil {
		return x.WorkMode
	}
	return ""
}

func (x *FanInfo) GetCurrentPower() string {
	if x != nil {
		return x.CurrentPower
	}
	return ""
}

func (x *FanInfo) GetCurrentVoltage() string {
	if x != nil {
		return x.CurrentVoltage
	}
	return ""
}

func (x *FanInfo) GetCurrentCurrent() string {
	if x != nil {
		return x.CurrentCurrent
	}
	return ""
}

func (x *FanInfo) GetSpeedPercent() string {
	if x != nil {
		return x.SpeedPercent
	}
	return ""
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for power information                           *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]/oc-psu:power-supply/state  *
//
// ***********************************************************************************
type PowerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Adminsitrative control on the on/off state
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"` //采样电源模块上下电状态
	// Maximum power capacity of the power supply
	Capacity float32 `protobuf:"fixed32,2,opt,name=capacity,proto3" json:"capacity,omitempty"` //采样电源模块额定功率，单位：瓦
	// The input current draw of the power supply
	InputCurrent float32 `protobuf:"fixed32,3,opt,name=input_current,json=inputCurrent,proto3" json:"input_current,omitempty"` //采样电源模块输入电流，单位：安培
	// Input voltage to the power supply
	InputVoltage float32 `protobuf:"fixed32,4,opt,name=input_voltage,json=inputVoltage,proto3" json:"input_voltage,omitempty"` //采集电源模块输入电压，单位：伏特
	// The output current supplied by the power supply
	OutputCurrent float32 `protobuf:"fixed32,5,opt,name=output_current,json=outputCurrent,proto3" json:"output_current,omitempty"` //采样电源模块输出电流，单位：安培
	// Output voltage to the power supply
	OutputVoltage float32 `protobuf:"fixed32,6,opt,name=output_voltage,json=outputVoltage,proto3" json:"output_voltage,omitempty"` //采集电源模块输出电压，单位：伏特
	// Output power supplied by the power supply
	OutputPower float32 `protobuf:"fixed32,7,opt,name=output_power,json=outputPower,proto3" json:"output_power,omitempty"` //采样电源模块输出功率，单位：瓦
	// Work state of the power supply
	WorkState      string  `protobuf:"bytes,8,opt,name=work_state,json=workState,proto3" json:"work_state,omitempty"`                   //采样电源工作状态，对应run status
	PowerName      string  `protobuf:"bytes,9,opt,name=power_name,json=powerName,proto3" json:"power_name,omitempty"`                   //采样电源名称
	PhyState       string  `protobuf:"bytes,10,opt,name=phy_state,json=phyState,proto3" json:"phy_state,omitempty"`                     //采样电源物理在线状态
	PowerState     string  `protobuf:"bytes,11,opt,name=power_state,json=powerState,proto3" json:"power_state,omitempty"`               //采样电源开关机状态
	ComState       string  `protobuf:"bytes,12,opt,name=com_state,json=comState,proto3" json:"com_state,omitempty"`                     //采样电源通讯状态
	Temperature    string  `protobuf:"bytes,13,opt,name=temperature,proto3" json:"temperature,omitempty"`                               //采样电源温度
	Available      string  `protobuf:"bytes,14,opt,name=available,proto3" json:"available,omitempty"`                                   //采样电源模块剩余功率，单位：瓦
	CapacityString string  `protobuf:"bytes,15,opt,name=capacity_string,json=capacityString,proto3" json:"capacity_string,omitempty"`   //采样电源模块额定功率，字符形式，单位：瓦
	InputPower     string  `protobuf:"bytes,16,opt,name=input_power,json=inputPower,proto3" json:"input_power,omitempty"`               //采样电源模块输入功率，单位：瓦
	Input2Current  float32 `protobuf:"fixed32,17,opt,name=input2_current,json=input2Current,proto3" json:"input2_current,omitempty"`    //采样电源模块输出电流，单位：安培
	Input2Voltage  float32 `protobuf:"fixed32,18,opt,name=input2_voltage,json=input2Voltage,proto3" json:"input2_voltage,omitempty"`    //采集电源模块输入电压，单位：伏特
	Output2Current float32 `protobuf:"fixed32,19,opt,name=output2_current,json=output2Current,proto3" json:"output2_current,omitempty"` //采样电源模块输出电流，单位：安培
	Output2Voltage float32 `protobuf:"fixed32,20,opt,name=output2_voltage,json=output2Voltage,proto3" json:"output2_voltage,omitempty"` //采集电源模块输出电压，单位：伏特
}

func (x *PowerInfo) Reset() {
	*x = PowerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerInfo) ProtoMessage() {}

func (x *PowerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerInfo.ProtoReflect.Descriptor instead.
func (*PowerInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{7}
}

func (x *PowerInfo) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PowerInfo) GetCapacity() float32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *PowerInfo) GetInputCurrent() float32 {
	if x != nil {
		return x.InputCurrent
	}
	return 0
}

func (x *PowerInfo) GetInputVoltage() float32 {
	if x != nil {
		return x.InputVoltage
	}
	return 0
}

func (x *PowerInfo) GetOutputCurrent() float32 {
	if x != nil {
		return x.OutputCurrent
	}
	return 0
}

func (x *PowerInfo) GetOutputVoltage() float32 {
	if x != nil {
		return x.OutputVoltage
	}
	return 0
}

func (x *PowerInfo) GetOutputPower() float32 {
	if x != nil {
		return x.OutputPower
	}
	return 0
}

func (x *PowerInfo) GetWorkState() string {
	if x != nil {
		return x.WorkState
	}
	return ""
}

func (x *PowerInfo) GetPowerName() string {
	if x != nil {
		return x.PowerName
	}
	return ""
}

func (x *PowerInfo) GetPhyState() string {
	if x != nil {
		return x.PhyState
	}
	return ""
}

func (x *PowerInfo) GetPowerState() string {
	if x != nil {
		return x.PowerState
	}
	return ""
}

func (x *PowerInfo) GetComState() string {
	if x != nil {
		return x.ComState
	}
	return ""
}

func (x *PowerInfo) GetTemperature() string {
	if x != nil {
		return x.Temperature
	}
	return ""
}

func (x *PowerInfo) GetAvailable() string {
	if x != nil {
		return x.Available
	}
	return ""
}

func (x *PowerInfo) GetCapacityString() string {
	if x != nil {
		return x.CapacityString
	}
	return ""
}

func (x *PowerInfo) GetInputPower() string {
	if x != nil {
		return x.InputPower
	}
	return ""
}

func (x *PowerInfo) GetInput2Current() float32 {
	if x != nil {
		return x.Input2Current
	}
	return 0
}

func (x *PowerInfo) GetInput2Voltage() float32 {
	if x != nil {
		return x.Input2Voltage
	}
	return 0
}

func (x *PowerInfo) GetOutput2Current() float32 {
	if x != nil {
		return x.Output2Current
	}
	return 0
}

func (x *PowerInfo) GetOutput2Voltage() float32 {
	if x != nil {
		return x.Output2Voltage
	}
	return 0
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for storage information                         *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]/state/storage              *
//
// ***********************************************************************************
type StorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// availability of the storage
	Availability uint32 `protobuf:"varint,1,opt,name=availability,proto3" json:"availability,omitempty"` //当前单板的存储器利用率
}

func (x *StorageInfo) Reset() {
	*x = StorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageInfo) ProtoMessage() {}

func (x *StorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageInfo.ProtoReflect.Descriptor instead.
func (*StorageInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{8}
}

func (x *StorageInfo) GetAvailability() uint32 {
	if x != nil {
		return x.Availability
	}
	return 0
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for Optical channel information                  *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]/oc-transceiver:transceiver/physical-channels/channel/state        *
//
// ***********************************************************************************
type OptChanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       uint32       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                               //光通道channel号,没有unit16的数据类型
	OptchanInfo *OpticalInfo `protobuf:"bytes,2,opt,name=optchan_info,json=optchanInfo,proto3" json:"optchan_info,omitempty"` //光通道信息
}

func (x *OptChanInfo) Reset() {
	*x = OptChanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptChanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptChanInfo) ProtoMessage() {}

func (x *OptChanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptChanInfo.ProtoReflect.Descriptor instead.
func (*OptChanInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{9}
}

func (x *OptChanInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OptChanInfo) GetOptchanInfo() *OpticalInfo {
	if x != nil {
		return x.OptchanInfo
	}
	return nil
}

// ************************************************************************************
// Description:                                                                      *
//
//	The following messages defines for Optical information                  *
//	                                                                               *
//
// Subscription info:                                                                *
//
//	sensor-path: oc-platform:components/component[name]/oc-transceiver:transceiver/state        *
//
// ***********************************************************************************
type OpticalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// availability of the storage
	InPower      *OpticalPower      `protobuf:"bytes,1,opt,name=in_power,json=inPower,proto3" json:"in_power,omitempty"`                //接受光功率
	OutPower     *OpticalPower      `protobuf:"bytes,2,opt,name=out_power,json=outPower,proto3" json:"out_power,omitempty"`             //发送光功率
	BiasCurrent  *BiasCurrent       `protobuf:"bytes,3,opt,name=bias_current,json=biasCurrent,proto3" json:"bias_current,omitempty"`    //偏置电流
	Temperature  *OpticalTemp       `protobuf:"bytes,4,opt,name=temperature,proto3" json:"temperature,omitempty"`                       //温度
	Voltage      *Voltage           `protobuf:"bytes,5,opt,name=voltage,proto3" json:"voltage,omitempty"`                               //电压
	Alarm        *OpticalAlarm      `protobuf:"bytes,6,opt,name=alarm,proto3" json:"alarm,omitempty"`                                   //告警状态
	OnlineStatus *OnlineStatus      `protobuf:"bytes,7,opt,name=online_status,json=onlineStatus,proto3" json:"online_status,omitempty"` //在位状态
	RxThreshold  *OpticalPowerThres `protobuf:"bytes,8,opt,name=rx_threshold,json=rxThreshold,proto3" json:"rx_threshold,omitempty"`    //接收光功率门限
	TxThreshold  *OpticalPowerThres `protobuf:"bytes,9,opt,name=tx_threshold,json=txThreshold,proto3" json:"tx_threshold,omitempty"`    //发送光功率门限
}

func (x *OpticalInfo) Reset() {
	*x = OpticalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalInfo) ProtoMessage() {}

func (x *OpticalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalInfo.ProtoReflect.Descriptor instead.
func (*OpticalInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{10}
}

func (x *OpticalInfo) GetInPower() *OpticalPower {
	if x != nil {
		return x.InPower
	}
	return nil
}

func (x *OpticalInfo) GetOutPower() *OpticalPower {
	if x != nil {
		return x.OutPower
	}
	return nil
}

func (x *OpticalInfo) GetBiasCurrent() *BiasCurrent {
	if x != nil {
		return x.BiasCurrent
	}
	return nil
}

func (x *OpticalInfo) GetTemperature() *OpticalTemp {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (x *OpticalInfo) GetVoltage() *Voltage {
	if x != nil {
		return x.Voltage
	}
	return nil
}

func (x *OpticalInfo) GetAlarm() *OpticalAlarm {
	if x != nil {
		return x.Alarm
	}
	return nil
}

func (x *OpticalInfo) GetOnlineStatus() *OnlineStatus {
	if x != nil {
		return x.OnlineStatus
	}
	return nil
}

func (x *OpticalInfo) GetRxThreshold() *OpticalPowerThres {
	if x != nil {
		return x.RxThreshold
	}
	return nil
}

func (x *OpticalInfo) GetTxThreshold() *OpticalPowerThres {
	if x != nil {
		return x.TxThreshold
	}
	return nil
}

type OpticalPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instant value of power of the Optical
	Instant float32 `protobuf:"fixed32,1,opt,name=instant,proto3" json:"instant,omitempty"` //光模块的实时功率，单位：dbm
}

func (x *OpticalPower) Reset() {
	*x = OpticalPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalPower) ProtoMessage() {}

func (x *OpticalPower) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalPower.ProtoReflect.Descriptor instead.
func (*OpticalPower) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{11}
}

func (x *OpticalPower) GetInstant() float32 {
	if x != nil {
		return x.Instant
	}
	return 0
}

type BiasCurrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instant value of laser-bias-current of the Optical
	Instant float32 `protobuf:"fixed32,1,opt,name=instant,proto3" json:"instant,omitempty"` //偏置电流的实时值，单位：毫安（mA）
}

func (x *BiasCurrent) Reset() {
	*x = BiasCurrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiasCurrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiasCurrent) ProtoMessage() {}

func (x *BiasCurrent) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiasCurrent.ProtoReflect.Descriptor instead.
func (*BiasCurrent) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{12}
}

func (x *BiasCurrent) GetInstant() float32 {
	if x != nil {
		return x.Instant
	}
	return 0
}

type OpticalTemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instant value of temperature of the Optical
	Instant float32 `protobuf:"fixed32,1,opt,name=instant,proto3" json:"instant,omitempty"` //温度，单位：摄氏度(degC)
}

func (x *OpticalTemp) Reset() {
	*x = OpticalTemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalTemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalTemp) ProtoMessage() {}

func (x *OpticalTemp) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalTemp.ProtoReflect.Descriptor instead.
func (*OpticalTemp) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{13}
}

func (x *OpticalTemp) GetInstant() float32 {
	if x != nil {
		return x.Instant
	}
	return 0
}

type Voltage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instant value of Voltage of the Optical
	Vol33 float32 `protobuf:"fixed32,1,opt,name=Vol33,proto3" json:"Vol33,omitempty"` //3.3V电压，单位：伏特(V)
	Vol5  float32 `protobuf:"fixed32,2,opt,name=Vol5,proto3" json:"Vol5,omitempty"`   //5V电压，单位：伏特(V)
}

func (x *Voltage) Reset() {
	*x = Voltage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Voltage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voltage) ProtoMessage() {}

func (x *Voltage) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voltage.ProtoReflect.Descriptor instead.
func (*Voltage) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{14}
}

func (x *Voltage) GetVol33() float32 {
	if x != nil {
		return x.Vol33
	}
	return 0
}

func (x *Voltage) GetVol5() float32 {
	if x != nil {
		return x.Vol5
	}
	return 0
}

type OnlineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// online status of the Optical
	OnlineStatus string `protobuf:"bytes,1,opt,name=online_status,json=onlineStatus,proto3" json:"online_status,omitempty"`
}

func (x *OnlineStatus) Reset() {
	*x = OnlineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineStatus) ProtoMessage() {}

func (x *OnlineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineStatus.ProtoReflect.Descriptor instead.
func (*OnlineStatus) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{15}
}

func (x *OnlineStatus) GetOnlineStatus() string {
	if x != nil {
		return x.OnlineStatus
	}
	return ""
}

type OpticalPowerThres struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instant value of power threhold of the Optical
	HighAlarm    float32 `protobuf:"fixed32,1,opt,name=high_alarm,json=highAlarm,proto3" json:"high_alarm,omitempty"`            //高告警门限
	PreHighAlarm float32 `protobuf:"fixed32,2,opt,name=pre_high_alarm,json=preHighAlarm,proto3" json:"pre_high_alarm,omitempty"` //高预告警门限
	LowAlarm     float32 `protobuf:"fixed32,3,opt,name=low_alarm,json=lowAlarm,proto3" json:"low_alarm,omitempty"`               //低告警门限
	PreLowAlarm  float32 `protobuf:"fixed32,4,opt,name=pre_low_alarm,json=preLowAlarm,proto3" json:"pre_low_alarm,omitempty"`    //低预告警门限
}

func (x *OpticalPowerThres) Reset() {
	*x = OpticalPowerThres{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalPowerThres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalPowerThres) ProtoMessage() {}

func (x *OpticalPowerThres) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalPowerThres.ProtoReflect.Descriptor instead.
func (*OpticalPowerThres) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{16}
}

func (x *OpticalPowerThres) GetHighAlarm() float32 {
	if x != nil {
		return x.HighAlarm
	}
	return 0
}

func (x *OpticalPowerThres) GetPreHighAlarm() float32 {
	if x != nil {
		return x.PreHighAlarm
	}
	return 0
}

func (x *OpticalPowerThres) GetLowAlarm() float32 {
	if x != nil {
		return x.LowAlarm
	}
	return 0
}

func (x *OpticalPowerThres) GetPreLowAlarm() float32 {
	if x != nil {
		return x.PreLowAlarm
	}
	return 0
}

type OpticalAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LosStatus AlarmStatus   `protobuf:"varint,1,opt,name=los_status,json=losStatus,proto3,enum=zte.telemetry.platform.AlarmStatus" json:"los_status,omitempty"` //告警状态
	LosInfo   *LosAlarmInfo `protobuf:"bytes,2,opt,name=los_info,json=losInfo,proto3" json:"los_info,omitempty"`
}

func (x *OpticalAlarm) Reset() {
	*x = OpticalAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalAlarm) ProtoMessage() {}

func (x *OpticalAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalAlarm.ProtoReflect.Descriptor instead.
func (*OpticalAlarm) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{17}
}

func (x *OpticalAlarm) GetLosStatus() AlarmStatus {
	if x != nil {
		return x.LosStatus
	}
	return AlarmStatus_INVALID
}

func (x *OpticalAlarm) GetLosInfo() *LosAlarmInfo {
	if x != nil {
		return x.LosInfo
	}
	return nil
}

type LosAlarmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       uint32          `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                   //事件ID
	EventInterval uint32          `protobuf:"varint,3,opt,name=event_interval,json=eventInterval,proto3" json:"event_interval,omitempty"` //上报采集间隔 10ms
	OptInPower    []*OpticalPower `protobuf:"bytes,4,rep,name=opt_in_power,json=optInPower,proto3" json:"opt_in_power,omitempty"`         //接受光功率  600byte  300*10ms
	OptOutPower   []*OpticalPower `protobuf:"bytes,5,rep,name=opt_out_power,json=optOutPower,proto3" json:"opt_out_power,omitempty"`      //发送光功率
}

func (x *LosAlarmInfo) Reset() {
	*x = LosAlarmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LosAlarmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LosAlarmInfo) ProtoMessage() {}

func (x *LosAlarmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openconfig_platform_openconfig_platform_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LosAlarmInfo.ProtoReflect.Descriptor instead.
func (*LosAlarmInfo) Descriptor() ([]byte, []int) {
	return file_openconfig_platform_openconfig_platform_proto_rawDescGZIP(), []int{18}
}

func (x *LosAlarmInfo) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *LosAlarmInfo) GetEventInterval() uint32 {
	if x != nil {
		return x.EventInterval
	}
	return 0
}

func (x *LosAlarmInfo) GetOptInPower() []*OpticalPower {
	if x != nil {
		return x.OptInPower
	}
	return nil
}

func (x *LosAlarmInfo) GetOptOutPower() []*OpticalPower {
	if x != nil {
		return x.OptOutPower
	}
	return nil
}

var File_openconfig_platform_openconfig_platform_proto protoreflect.FileDescriptor

var file_openconfig_platform_openconfig_platform_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xd8, 0x05, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x74, 0x65, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x70, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x46, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x66, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x40, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x68, 0x61,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a,
	0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xaf, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x22, 0xfe, 0x03, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x61, 0x76, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x61, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xf3, 0x01, 0x0a, 0x07, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x07, 0x46, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x22, 0xbd, 0x05, 0x0a, 0x09, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x68, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x32, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x32, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x22, 0x31, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x6b, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xfe, 0x04, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a,
	0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x62, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x49, 0x0a, 0x0d,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x52, 0x0b, 0x72, 0x78, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x74,
	0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x52, 0x0b, 0x74, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x22, 0x28, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0x27, 0x0a,
	0x0b, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22,
	0x33, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x6f,
	0x6c, 0x33, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x56, 0x6f, 0x6c, 0x33, 0x33,
	0x12, 0x12, 0x0a, 0x04, 0x56, 0x6f, 0x6c, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x56, 0x6f, 0x6c, 0x35, 0x22, 0x33, 0x0a, 0x0c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x24,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x4c, 0x6f, 0x77,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x74, 0x65,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x6c, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x6f,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a,
	0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4c, 0x6f, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x6c, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x0c,
	0x4c, 0x6f, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46,
	0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x49,
	0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x2a, 0x31, 0x0a, 0x0b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x41, 0x52,
	0x4d, 0x10, 0x02, 0x42, 0x14, 0x5a, 0x12, 0x7a, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_openconfig_platform_openconfig_platform_proto_rawDescOnce sync.Once
	file_openconfig_platform_openconfig_platform_proto_rawDescData = file_openconfig_platform_openconfig_platform_proto_rawDesc
)

func file_openconfig_platform_openconfig_platform_proto_rawDescGZIP() []byte {
	file_openconfig_platform_openconfig_platform_proto_rawDescOnce.Do(func() {
		file_openconfig_platform_openconfig_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_openconfig_platform_openconfig_platform_proto_rawDescData)
	})
	return file_openconfig_platform_openconfig_platform_proto_rawDescData
}

var file_openconfig_platform_openconfig_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_openconfig_platform_openconfig_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_openconfig_platform_openconfig_platform_proto_goTypes = []any{
	(AlarmStatus)(0),          // 0: zte.telemetry.platform.AlarmStatus
	(*ComponentInfo)(nil),     // 1: zte.telemetry.platform.ComponentInfo
	(*CommonState)(nil),       // 2: zte.telemetry.platform.CommonState
	(*Temperature)(nil),       // 3: zte.telemetry.platform.Temperature
	(*MemoryInfo)(nil),        // 4: zte.telemetry.platform.MemoryInfo
	(*CpuInfo)(nil),           // 5: zte.telemetry.platform.CpuInfo
	(*LinecardInfo)(nil),      // 6: zte.telemetry.platform.LinecardInfo
	(*FanInfo)(nil),           // 7: zte.telemetry.platform.FanInfo
	(*PowerInfo)(nil),         // 8: zte.telemetry.platform.PowerInfo
	(*StorageInfo)(nil),       // 9: zte.telemetry.platform.StorageInfo
	(*OptChanInfo)(nil),       // 10: zte.telemetry.platform.OptChanInfo
	(*OpticalInfo)(nil),       // 11: zte.telemetry.platform.OpticalInfo
	(*OpticalPower)(nil),      // 12: zte.telemetry.platform.OpticalPower
	(*BiasCurrent)(nil),       // 13: zte.telemetry.platform.BiasCurrent
	(*OpticalTemp)(nil),       // 14: zte.telemetry.platform.OpticalTemp
	(*Voltage)(nil),           // 15: zte.telemetry.platform.Voltage
	(*OnlineStatus)(nil),      // 16: zte.telemetry.platform.OnlineStatus
	(*OpticalPowerThres)(nil), // 17: zte.telemetry.platform.OpticalPowerThres
	(*OpticalAlarm)(nil),      // 18: zte.telemetry.platform.OpticalAlarm
	(*LosAlarmInfo)(nil),      // 19: zte.telemetry.platform.LosAlarmInfo
}
var file_openconfig_platform_openconfig_platform_proto_depIdxs = []int32{
	2,  // 0: zte.telemetry.platform.ComponentInfo.common_state:type_name -> zte.telemetry.platform.CommonState
	3,  // 1: zte.telemetry.platform.ComponentInfo.temp_info:type_name -> zte.telemetry.platform.Temperature
	4,  // 2: zte.telemetry.platform.ComponentInfo.mem_info:type_name -> zte.telemetry.platform.MemoryInfo
	5,  // 3: zte.telemetry.platform.ComponentInfo.cpu_info:type_name -> zte.telemetry.platform.CpuInfo
	6,  // 4: zte.telemetry.platform.ComponentInfo.power_admin_state:type_name -> zte.telemetry.platform.LinecardInfo
	7,  // 5: zte.telemetry.platform.ComponentInfo.fan_info:type_name -> zte.telemetry.platform.FanInfo
	8,  // 6: zte.telemetry.platform.ComponentInfo.power_info:type_name -> zte.telemetry.platform.PowerInfo
	9,  // 7: zte.telemetry.platform.ComponentInfo.storage_info:type_name -> zte.telemetry.platform.StorageInfo
	11, // 8: zte.telemetry.platform.ComponentInfo.optical_info:type_name -> zte.telemetry.platform.OpticalInfo
	10, // 9: zte.telemetry.platform.ComponentInfo.opticalchan_info:type_name -> zte.telemetry.platform.OptChanInfo
	0,  // 10: zte.telemetry.platform.MemoryInfo.alarm_status:type_name -> zte.telemetry.platform.AlarmStatus
	0,  // 11: zte.telemetry.platform.CpuInfo.alarm_status:type_name -> zte.telemetry.platform.AlarmStatus
	11, // 12: zte.telemetry.platform.OptChanInfo.optchan_info:type_name -> zte.telemetry.platform.OpticalInfo
	12, // 13: zte.telemetry.platform.OpticalInfo.in_power:type_name -> zte.telemetry.platform.OpticalPower
	12, // 14: zte.telemetry.platform.OpticalInfo.out_power:type_name -> zte.telemetry.platform.OpticalPower
	13, // 15: zte.telemetry.platform.OpticalInfo.bias_current:type_name -> zte.telemetry.platform.BiasCurrent
	14, // 16: zte.telemetry.platform.OpticalInfo.temperature:type_name -> zte.telemetry.platform.OpticalTemp
	15, // 17: zte.telemetry.platform.OpticalInfo.voltage:type_name -> zte.telemetry.platform.Voltage
	18, // 18: zte.telemetry.platform.OpticalInfo.alarm:type_name -> zte.telemetry.platform.OpticalAlarm
	16, // 19: zte.telemetry.platform.OpticalInfo.online_status:type_name -> zte.telemetry.platform.OnlineStatus
	17, // 20: zte.telemetry.platform.OpticalInfo.rx_threshold:type_name -> zte.telemetry.platform.OpticalPowerThres
	17, // 21: zte.telemetry.platform.OpticalInfo.tx_threshold:type_name -> zte.telemetry.platform.OpticalPowerThres
	0,  // 22: zte.telemetry.platform.OpticalAlarm.los_status:type_name -> zte.telemetry.platform.AlarmStatus
	19, // 23: zte.telemetry.platform.OpticalAlarm.los_info:type_name -> zte.telemetry.platform.LosAlarmInfo
	12, // 24: zte.telemetry.platform.LosAlarmInfo.opt_in_power:type_name -> zte.telemetry.platform.OpticalPower
	12, // 25: zte.telemetry.platform.LosAlarmInfo.opt_out_power:type_name -> zte.telemetry.platform.OpticalPower
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_openconfig_platform_openconfig_platform_proto_init() }
func file_openconfig_platform_openconfig_platform_proto_init() {
	if File_openconfig_platform_openconfig_platform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openconfig_platform_openconfig_platform_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ComponentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CommonState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Temperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LinecardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PowerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*OptChanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*OpticalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*OpticalPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*BiasCurrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*OpticalTemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Voltage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OnlineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*OpticalPowerThres); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*OpticalAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openconfig_platform_openconfig_platform_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*LosAlarmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openconfig_platform_openconfig_platform_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openconfig_platform_openconfig_platform_proto_goTypes,
		DependencyIndexes: file_openconfig_platform_openconfig_platform_proto_depIdxs,
		EnumInfos:         file_openconfig_platform_openconfig_platform_proto_enumTypes,
		MessageInfos:      file_openconfig_platform_openconfig_platform_proto_msgTypes,
	}.Build()
	File_openconfig_platform_openconfig_platform_proto = out.File
	file_openconfig_platform_openconfig_platform_proto_rawDesc = nil
	file_openconfig_platform_openconfig_platform_proto_goTypes = nil
	file_openconfig_platform_openconfig_platform_proto_depIdxs = nil
}
