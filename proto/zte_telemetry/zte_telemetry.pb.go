//************************************************************************************
// Copyright (C) 2018-2020  ZTE Corporation.  All rights reserved.                   *
//************************************************************************************
// Description:                                                                      *
//    This proto defines a schema for telemetry                                      *
//                                                                                   *
//************************************************************************************
// Organization:                                                                     *
//   ZTE Corporation                                                                *
//************************************************************************************
// Contact:                                                                          *
//    ZTE Corporation                                                                *
//    Nanjing Institute of ZTE Corporation                                           *
//"    No.68 Zijinghua Rd. Yuhuatai District, Nanjing, China                          *
//    Tel: +86-25-52870000                                                           *
//************************************************************************************
// version:                                                                          *
//    1st edition 2020-01-20                                                         *
//    2nd edition 2021-07-16                                                         *
//    3rd edition 2021-10-30                                                         *
//***********************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.32.0
// source: zte_telemetry/zte_telemetry.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TelemetryDataType int32

const (
	TelemetryDataType_PM    TelemetryDataType = 0
	TelemetryDataType_ALARM TelemetryDataType = 1
)

// Enum value maps for TelemetryDataType.
var (
	TelemetryDataType_name = map[int32]string{
		0: "PM",
		1: "ALARM",
	}
	TelemetryDataType_value = map[string]int32{
		"PM":    0,
		"ALARM": 1,
	}
)

func (x TelemetryDataType) Enum() *TelemetryDataType {
	p := new(TelemetryDataType)
	*p = x
	return p
}

func (x TelemetryDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_zte_telemetry_zte_telemetry_proto_enumTypes[0].Descriptor()
}

func (TelemetryDataType) Type() protoreflect.EnumType {
	return &file_zte_telemetry_zte_telemetry_proto_enumTypes[0]
}

func (x TelemetryDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryDataType.Descriptor instead.
func (TelemetryDataType) EnumDescriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{0}
}

type Relation int32

const (
	Relation_RELATION_INVALID Relation = 0 //无效值
	Relation_RELATION_AND     Relation = 1 //与关系
	Relation_RELATION_OR      Relation = 2 //或关系
)

// Enum value maps for Relation.
var (
	Relation_name = map[int32]string{
		0: "RELATION_INVALID",
		1: "RELATION_AND",
		2: "RELATION_OR",
	}
	Relation_value = map[string]int32{
		"RELATION_INVALID": 0,
		"RELATION_AND":     1,
		"RELATION_OR":      2,
	}
)

func (x Relation) Enum() *Relation {
	p := new(Relation)
	*p = x
	return p
}

func (x Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_zte_telemetry_zte_telemetry_proto_enumTypes[1].Descriptor()
}

func (Relation) Type() protoreflect.EnumType {
	return &file_zte_telemetry_zte_telemetry_proto_enumTypes[1]
}

func (x Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Relation.Descriptor instead.
func (Relation) EnumDescriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{1}
}

type ThresholdOpType int32

const (
	ThresholdOpType_THRESHOLD_OPTYPE_INVALID ThresholdOpType = 0
	ThresholdOpType_THRESHOLD_OPTYPE_EQ      ThresholdOpType = 1 //等于
	ThresholdOpType_THRESHOLD_OPTYPE_GE      ThresholdOpType = 2 //大于等于
	ThresholdOpType_THRESHOLD_OPTYPE_GT      ThresholdOpType = 3 //大于
	ThresholdOpType_THRESHOLD_OPTYPE_LE      ThresholdOpType = 4 //小于等于
	ThresholdOpType_THRESHOLD_OPTYPE_LT      ThresholdOpType = 5 //小于
)

// Enum value maps for ThresholdOpType.
var (
	ThresholdOpType_name = map[int32]string{
		0: "THRESHOLD_OPTYPE_INVALID",
		1: "THRESHOLD_OPTYPE_EQ",
		2: "THRESHOLD_OPTYPE_GE",
		3: "THRESHOLD_OPTYPE_GT",
		4: "THRESHOLD_OPTYPE_LE",
		5: "THRESHOLD_OPTYPE_LT",
	}
	ThresholdOpType_value = map[string]int32{
		"THRESHOLD_OPTYPE_INVALID": 0,
		"THRESHOLD_OPTYPE_EQ":      1,
		"THRESHOLD_OPTYPE_GE":      2,
		"THRESHOLD_OPTYPE_GT":      3,
		"THRESHOLD_OPTYPE_LE":      4,
		"THRESHOLD_OPTYPE_LT":      5,
	}
)

func (x ThresholdOpType) Enum() *ThresholdOpType {
	p := new(ThresholdOpType)
	*p = x
	return p
}

func (x ThresholdOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThresholdOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_zte_telemetry_zte_telemetry_proto_enumTypes[2].Descriptor()
}

func (ThresholdOpType) Type() protoreflect.EnumType {
	return &file_zte_telemetry_zte_telemetry_proto_enumTypes[2]
}

func (x ThresholdOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThresholdOpType.Descriptor instead.
func (ThresholdOpType) EnumDescriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{2}
}

type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId       string            `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`                                       //可以是hostname，用于标识设备。
	SubscriptionId string            `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                     //订阅名
	MngIpv4        string            `protobuf:"bytes,3,opt,name=mng_ipv4,json=mngIpv4,proto3" json:"mng_ipv4,omitempty"`                                          //设备管理口的IPv4地址
	MngIpv6        string            `protobuf:"bytes,4,opt,name=mng_ipv6,json=mngIpv6,proto3" json:"mng_ipv6,omitempty"`                                          //设备管理口的IPv6地址
	DataType       TelemetryDataType `protobuf:"varint,5,opt,name=data_type,json=dataType,proto3,enum=zte.telemetry.TelemetryDataType" json:"data_type,omitempty"` //default is PM
	SensorPath     string            `protobuf:"bytes,6,opt,name=sensor_path,json=sensorPath,proto3" json:"sensor_path,omitempty"`                                 //可选,GPB压缩编码时填写,采样路径，例：oc-if:interfaces/interface/state/counters,
	//自定义事件时,为:zte-telemetry:SelfDefinedEvent
	ProtoPath string `protobuf:"bytes,7,opt,name=proto_path,json=protoPath,proto3" json:"proto_path,omitempty"` //可选,GPB压缩编码时填写,标识采用数据对应的proto消息，形式：<package>.<message>，例：zte.telemetry.interface.InterfaceInfo,
	//自定义事件时,为:zte.telemetry.SelfDefinedEvent
	CollectionId        uint64               `protobuf:"varint,8,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`                        //标识采样轮次。一次采样分多包消息时采样轮次相同。
	CollectionStartTime uint64               `protobuf:"varint,9,opt,name=collection_start_time,json=collectionStartTime,proto3" json:"collection_start_time,omitempty"` //标识采样轮次开始的UTC时间。单位:毫秒 since 1970:0:0:0。如果一次采样分多包消息时,只有第一包消息才填写时间。
	MsgTimestamp        uint64               `protobuf:"varint,10,opt,name=msg_timestamp,json=msgTimestamp,proto3" json:"msg_timestamp,omitempty"`                       //生成本消息的UTC时间戳。 单位:毫秒 since 1970:0:0:0
	CollectionEndTime   uint64               `protobuf:"varint,11,opt,name=collection_end_time,json=collectionEndTime,proto3" json:"collection_end_time,omitempty"`      //标识采样轮次结束UTC时间。 单位:毫秒 since 1970:0:0:0，如果一次采样分多包消息时,只有最后一包消息才填写结束时间。
	CurrentPeriod       uint32               `protobuf:"varint,12,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty"`                    //采样精度，单位:毫秒。填写为业务实际的采样周期
	DataGpbkv           []*NotificationGpbKv `protobuf:"bytes,13,rep,name=data_gpbkv,json=dataGpbkv,proto3" json:"data_gpbkv,omitempty"`                                 //GPB-KV编码数据。
	DataGpb             []*NotificationGpb   `protobuf:"bytes,14,rep,name=data_gpb,json=dataGpb,proto3" json:"data_gpb,omitempty"`                                       //GPB压缩编码的数据
	JsonIetfVal         string               `protobuf:"bytes,15,opt,name=json_ietf_val,json=jsonIetfVal,proto3" json:"json_ietf_val,omitempty"`                         //JSON-encoded text per RFC7951.
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *Telemetry) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *Telemetry) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Telemetry) GetMngIpv4() string {
	if x != nil {
		return x.MngIpv4
	}
	return ""
}

func (x *Telemetry) GetMngIpv6() string {
	if x != nil {
		return x.MngIpv6
	}
	return ""
}

func (x *Telemetry) GetDataType() TelemetryDataType {
	if x != nil {
		return x.DataType
	}
	return TelemetryDataType_PM
}

func (x *Telemetry) GetSensorPath() string {
	if x != nil {
		return x.SensorPath
	}
	return ""
}

func (x *Telemetry) GetProtoPath() string {
	if x != nil {
		return x.ProtoPath
	}
	return ""
}

func (x *Telemetry) GetCollectionId() uint64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *Telemetry) GetCollectionStartTime() uint64 {
	if x != nil {
		return x.CollectionStartTime
	}
	return 0
}

func (x *Telemetry) GetMsgTimestamp() uint64 {
	if x != nil {
		return x.MsgTimestamp
	}
	return 0
}

func (x *Telemetry) GetCollectionEndTime() uint64 {
	if x != nil {
		return x.CollectionEndTime
	}
	return 0
}

func (x *Telemetry) GetCurrentPeriod() uint32 {
	if x != nil {
		return x.CurrentPeriod
	}
	return 0
}

func (x *Telemetry) GetDataGpbkv() []*NotificationGpbKv {
	if x != nil {
		return x.DataGpbkv
	}
	return nil
}

func (x *Telemetry) GetDataGpb() []*NotificationGpb {
	if x != nil {
		return x.DataGpb
	}
	return nil
}

func (x *Telemetry) GetJsonIetfVal() string {
	if x != nil {
		return x.JsonIetfVal
	}
	return ""
}

type NotificationGpb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //采样当前实例的UTC时间，单位:毫秒 since 1970:0:0:0
	Content   []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`      //承载的采样实例数据，需要结合sensor_path或proto_path字段，才可以判断此处会以哪个proto文件编码。
}

func (x *NotificationGpb) Reset() {
	*x = NotificationGpb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationGpb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationGpb) ProtoMessage() {}

func (x *NotificationGpb) ProtoReflect() protoreflect.Message {
	mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationGpb.ProtoReflect.Descriptor instead.
func (*NotificationGpb) Descriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *NotificationGpb) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NotificationGpb) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type NotificationGpbKv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    uint64      `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // 采样数据生成的UTC时间，since 1970:0:0:0
	InstancePath string      `protobuf:"bytes,2,opt,name=instance_path,json=instancePath,proto3" json:"instance_path,omitempty"` // The instance path. For examples:oc-if:interfaces/interface[name=gei-1/2/1]/subinterfaces/subinterface[index=9]/state/counters
	Value        []*KeyValue `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`                                   // Data elements that have changed values.
}

func (x *NotificationGpbKv) Reset() {
	*x = NotificationGpbKv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationGpbKv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationGpbKv) ProtoMessage() {}

func (x *NotificationGpbKv) ProtoReflect() protoreflect.Message {
	mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationGpbKv.ProtoReflect.Descriptor instead.
func (*NotificationGpbKv) Descriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *NotificationGpbKv) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NotificationGpbKv) GetInstancePath() string {
	if x != nil {
		return x.InstancePath
	}
	return ""
}

func (x *NotificationGpbKv) GetValue() []*KeyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyname string      `protobuf:"bytes,1,opt,name=keyname,proto3" json:"keyname,omitempty"`
	Element *TypedValue `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValue) GetKeyname() string {
	if x != nil {
		return x.Keyname
	}
	return ""
}

func (x *KeyValue) GetElement() *TypedValue {
	if x != nil {
		return x.Element
	}
	return nil
}

type TypedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*TypedValue_StringVal
	//	*TypedValue_Int64Val
	//	*TypedValue_Uint64Val
	//	*TypedValue_Int32Val
	//	*TypedValue_Uint32Val
	//	*TypedValue_FloatVal
	//	*TypedValue_DoubleVal
	//	*TypedValue_BytesVal
	Value isTypedValue_Value `protobuf_oneof:"value"`
}

func (x *TypedValue) Reset() {
	*x = TypedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedValue) ProtoMessage() {}

func (x *TypedValue) ProtoReflect() protoreflect.Message {
	mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedValue.ProtoReflect.Descriptor instead.
func (*TypedValue) Descriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{4}
}

func (m *TypedValue) GetValue() isTypedValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TypedValue) GetStringVal() string {
	if x, ok := x.GetValue().(*TypedValue_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (x *TypedValue) GetInt64Val() int64 {
	if x, ok := x.GetValue().(*TypedValue_Int64Val); ok {
		return x.Int64Val
	}
	return 0
}

func (x *TypedValue) GetUint64Val() uint64 {
	if x, ok := x.GetValue().(*TypedValue_Uint64Val); ok {
		return x.Uint64Val
	}
	return 0
}

func (x *TypedValue) GetInt32Val() int32 {
	if x, ok := x.GetValue().(*TypedValue_Int32Val); ok {
		return x.Int32Val
	}
	return 0
}

func (x *TypedValue) GetUint32Val() uint32 {
	if x, ok := x.GetValue().(*TypedValue_Uint32Val); ok {
		return x.Uint32Val
	}
	return 0
}

func (x *TypedValue) GetFloatVal() float32 {
	if x, ok := x.GetValue().(*TypedValue_FloatVal); ok {
		return x.FloatVal
	}
	return 0
}

func (x *TypedValue) GetDoubleVal() float64 {
	if x, ok := x.GetValue().(*TypedValue_DoubleVal); ok {
		return x.DoubleVal
	}
	return 0
}

func (x *TypedValue) GetBytesVal() []byte {
	if x, ok := x.GetValue().(*TypedValue_BytesVal); ok {
		return x.BytesVal
	}
	return nil
}

type isTypedValue_Value interface {
	isTypedValue_Value()
}

type TypedValue_StringVal struct {
	StringVal string `protobuf:"bytes,1,opt,name=string_val,json=stringVal,proto3,oneof"` // String value.
}

type TypedValue_Int64Val struct {
	Int64Val int64 `protobuf:"varint,2,opt,name=int64_val,json=int64Val,proto3,oneof"` // Integer value.
}

type TypedValue_Uint64Val struct {
	Uint64Val uint64 `protobuf:"varint,3,opt,name=uint64_val,json=uint64Val,proto3,oneof"` // Unsigned integer value.
}

type TypedValue_Int32Val struct {
	Int32Val int32 `protobuf:"varint,4,opt,name=int32_val,json=int32Val,proto3,oneof"` // Integer value.
}

type TypedValue_Uint32Val struct {
	Uint32Val uint32 `protobuf:"varint,5,opt,name=uint32_val,json=uint32Val,proto3,oneof"` // Unsigned integer value.
}

type TypedValue_FloatVal struct {
	FloatVal float32 `protobuf:"fixed32,6,opt,name=float_val,json=floatVal,proto3,oneof"` // float value.
}

type TypedValue_DoubleVal struct {
	DoubleVal float64 `protobuf:"fixed64,7,opt,name=double_val,json=doubleVal,proto3,oneof"` // double value.
}

type TypedValue_BytesVal struct {
	BytesVal []byte `protobuf:"bytes,8,opt,name=bytes_val,json=bytesVal,proto3,oneof"` // bytes value.
}

func (*TypedValue_StringVal) isTypedValue_Value() {}

func (*TypedValue_Int64Val) isTypedValue_Value() {}

func (*TypedValue_Uint64Val) isTypedValue_Value() {}

func (*TypedValue_Int32Val) isTypedValue_Value() {}

func (*TypedValue_Uint32Val) isTypedValue_Value() {}

func (*TypedValue_FloatVal) isTypedValue_Value() {}

func (*TypedValue_DoubleVal) isTypedValue_Value() {}

func (*TypedValue_BytesVal) isTypedValue_Value() {}

//########################################################################################
//     自定义事件格式定义
//########################################################################################
type SelfDefinedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorPath     string               `protobuf:"bytes,1,opt,name=sensor_path,json=sensorPath,proto3" json:"sensor_path,omitempty"`                                          //GPB压缩编码时填写,触发自定义事件的采样路径，例：oc-if:interfaces/interface/state/counters
	ProtoPath      string               `protobuf:"bytes,2,opt,name=proto_path,json=protoPath,proto3" json:"proto_path,omitempty"`                                             //GPB压缩编码时填写,标识触发自定义事件的采用数据对应的proto消息,形式：<package>.<message>，例：zte.telemetry.interface.InterfaceInfo
	Level          uint32               `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`                                                                     //自定义事件的级别。
	Description    string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                                          //自定义事件的描述信息。
	FilterRelation Relation             `protobuf:"varint,5,opt,name=filter_relation,json=filterRelation,proto3,enum=zte.telemetry.Relation" json:"filter_relation,omitempty"` //触发自定义事件过滤条件之间的关系
	Filter         []*SelfDefinedFilter `protobuf:"bytes,6,rep,name=filter,proto3" json:"filter,omitempty"`                                                                    //触发自定义事件的过滤条件
	ContentGpbkv   *NotificationGpbKv   `protobuf:"bytes,7,opt,name=content_gpbkv,json=contentGpbkv,proto3" json:"content_gpbkv,omitempty"`                                    //触发自定义事件的GPB-KV编码采样数据内容
	ContentGpb     []byte               `protobuf:"bytes,8,opt,name=content_gpb,json=contentGpb,proto3" json:"content_gpb,omitempty"`                                          //触发自定义事件的GPB压缩编码的采样数据内容
	ContentJson    string               `protobuf:"bytes,9,opt,name=content_json,json=contentJson,proto3" json:"content_json,omitempty"`                                       //JSON-encoded text per RFC7951.
}

func (x *SelfDefinedEvent) Reset() {
	*x = SelfDefinedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfDefinedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfDefinedEvent) ProtoMessage() {}

func (x *SelfDefinedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfDefinedEvent.ProtoReflect.Descriptor instead.
func (*SelfDefinedEvent) Descriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *SelfDefinedEvent) GetSensorPath() string {
	if x != nil {
		return x.SensorPath
	}
	return ""
}

func (x *SelfDefinedEvent) GetProtoPath() string {
	if x != nil {
		return x.ProtoPath
	}
	return ""
}

func (x *SelfDefinedEvent) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SelfDefinedEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SelfDefinedEvent) GetFilterRelation() Relation {
	if x != nil {
		return x.FilterRelation
	}
	return Relation_RELATION_INVALID
}

func (x *SelfDefinedEvent) GetFilter() []*SelfDefinedFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SelfDefinedEvent) GetContentGpbkv() *NotificationGpbKv {
	if x != nil {
		return x.ContentGpbkv
	}
	return nil
}

func (x *SelfDefinedEvent) GetContentGpb() []byte {
	if x != nil {
		return x.ContentGpb
	}
	return nil
}

func (x *SelfDefinedEvent) GetContentJson() string {
	if x != nil {
		return x.ContentJson
	}
	return ""
}

type SelfDefinedFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionRelation Relation           `protobuf:"varint,1,opt,name=condition_relation,json=conditionRelation,proto3,enum=zte.telemetry.Relation" json:"condition_relation,omitempty"` //过滤条件之间的关系
	Condition         []*FilterCondition `protobuf:"bytes,2,rep,name=condition,proto3" json:"condition,omitempty"`                                                                       //过滤条件
}

func (x *SelfDefinedFilter) Reset() {
	*x = SelfDefinedFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfDefinedFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfDefinedFilter) ProtoMessage() {}

func (x *SelfDefinedFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfDefinedFilter.ProtoReflect.Descriptor instead.
func (*SelfDefinedFilter) Descriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *SelfDefinedFilter) GetConditionRelation() Relation {
	if x != nil {
		return x.ConditionRelation
	}
	return Relation_RELATION_INVALID
}

func (x *SelfDefinedFilter) GetCondition() []*FilterCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type FilterCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpField          string          `protobuf:"bytes,1,opt,name=op_field,json=opField,proto3" json:"op_field,omitempty"`                                  //触发条件的字段名称
	OpType           ThresholdOpType `protobuf:"varint,2,opt,name=op_type,json=opType,proto3,enum=zte.telemetry.ThresholdOpType" json:"op_type,omitempty"` //触发条件时字段值与阈值的关系
	ThresholdOpValue *TypedValue     `protobuf:"bytes,3,opt,name=threshold_op_value,json=thresholdOpValue,proto3" json:"threshold_op_value,omitempty"`     //触发条件的字段阈值
	OpValue          *TypedValue     `protobuf:"bytes,4,opt,name=op_value,json=opValue,proto3" json:"op_value,omitempty"`                                  //触发条件时该字段的取值
}

func (x *FilterCondition) Reset() {
	*x = FilterCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCondition) ProtoMessage() {}

func (x *FilterCondition) ProtoReflect() protoreflect.Message {
	mi := &file_zte_telemetry_zte_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCondition.ProtoReflect.Descriptor instead.
func (*FilterCondition) Descriptor() ([]byte, []int) {
	return file_zte_telemetry_zte_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *FilterCondition) GetOpField() string {
	if x != nil {
		return x.OpField
	}
	return ""
}

func (x *FilterCondition) GetOpType() ThresholdOpType {
	if x != nil {
		return x.OpType
	}
	return ThresholdOpType_THRESHOLD_OPTYPE_INVALID
}

func (x *FilterCondition) GetThresholdOpValue() *TypedValue {
	if x != nil {
		return x.ThresholdOpValue
	}
	return nil
}

func (x *FilterCondition) GetOpValue() *TypedValue {
	if x != nil {
		return x.OpValue
	}
	return nil
}

var File_zte_telemetry_zte_telemetry_proto protoreflect.FileDescriptor

var file_zte_telemetry_zte_telemetry_proto_rawDesc = []byte{
	0x0a, 0x21, 0x7a, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f,
	0x7a, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x22, 0xfb, 0x04, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6e, 0x67, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6e, 0x67, 0x49, 0x70, 0x76,
	0x34, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6e, 0x67, 0x49, 0x70, 0x76, 0x36, 0x12, 0x3d, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x73, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x70, 0x62, 0x6b, 0x76, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x70, 0x62, 0x4b, 0x76, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x47, 0x70, 0x62, 0x6b,
	0x76, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x70, 0x62, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x70, 0x62, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x47, 0x70, 0x62, 0x12, 0x22, 0x0a, 0x0d,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x65, 0x74, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x49, 0x65, 0x74, 0x66, 0x56, 0x61, 0x6c,
	0x22, 0x49, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x70, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x11,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x70, 0x62, 0x4b,
	0x76, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x74, 0x65,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x95,
	0x02, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x66, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a,
	0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x70, 0x62, 0x6b, 0x76,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x70, 0x62, 0x4b, 0x76, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x47, 0x70, 0x62, 0x6b, 0x76, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x70, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x47, 0x70, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x53,
	0x65, 0x6c, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a,
	0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x74,
	0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47,
	0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x74, 0x65,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x74, 0x65, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x26, 0x0a,
	0x11, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c,
	0x41, 0x52, 0x4d, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xac, 0x01, 0x0a, 0x0f, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x51, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f,
	0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x48, 0x52, 0x45, 0x53,
	0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x54, 0x10, 0x05, 0x42, 0x14, 0x5a, 0x12, 0x7a, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zte_telemetry_zte_telemetry_proto_rawDescOnce sync.Once
	file_zte_telemetry_zte_telemetry_proto_rawDescData = file_zte_telemetry_zte_telemetry_proto_rawDesc
)

func file_zte_telemetry_zte_telemetry_proto_rawDescGZIP() []byte {
	file_zte_telemetry_zte_telemetry_proto_rawDescOnce.Do(func() {
		file_zte_telemetry_zte_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_zte_telemetry_zte_telemetry_proto_rawDescData)
	})
	return file_zte_telemetry_zte_telemetry_proto_rawDescData
}

var file_zte_telemetry_zte_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_zte_telemetry_zte_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_zte_telemetry_zte_telemetry_proto_goTypes = []any{
	(TelemetryDataType)(0),    // 0: zte.telemetry.TelemetryDataType
	(Relation)(0),             // 1: zte.telemetry.Relation
	(ThresholdOpType)(0),      // 2: zte.telemetry.ThresholdOpType
	(*Telemetry)(nil),         // 3: zte.telemetry.Telemetry
	(*NotificationGpb)(nil),   // 4: zte.telemetry.NotificationGpb
	(*NotificationGpbKv)(nil), // 5: zte.telemetry.NotificationGpbKv
	(*KeyValue)(nil),          // 6: zte.telemetry.KeyValue
	(*TypedValue)(nil),        // 7: zte.telemetry.TypedValue
	(*SelfDefinedEvent)(nil),  // 8: zte.telemetry.SelfDefinedEvent
	(*SelfDefinedFilter)(nil), // 9: zte.telemetry.SelfDefinedFilter
	(*FilterCondition)(nil),   // 10: zte.telemetry.FilterCondition
}
var file_zte_telemetry_zte_telemetry_proto_depIdxs = []int32{
	0,  // 0: zte.telemetry.Telemetry.data_type:type_name -> zte.telemetry.TelemetryDataType
	5,  // 1: zte.telemetry.Telemetry.data_gpbkv:type_name -> zte.telemetry.NotificationGpbKv
	4,  // 2: zte.telemetry.Telemetry.data_gpb:type_name -> zte.telemetry.NotificationGpb
	6,  // 3: zte.telemetry.NotificationGpbKv.value:type_name -> zte.telemetry.KeyValue
	7,  // 4: zte.telemetry.KeyValue.element:type_name -> zte.telemetry.TypedValue
	1,  // 5: zte.telemetry.SelfDefinedEvent.filter_relation:type_name -> zte.telemetry.Relation
	9,  // 6: zte.telemetry.SelfDefinedEvent.filter:type_name -> zte.telemetry.SelfDefinedFilter
	5,  // 7: zte.telemetry.SelfDefinedEvent.content_gpbkv:type_name -> zte.telemetry.NotificationGpbKv
	1,  // 8: zte.telemetry.SelfDefinedFilter.condition_relation:type_name -> zte.telemetry.Relation
	10, // 9: zte.telemetry.SelfDefinedFilter.condition:type_name -> zte.telemetry.FilterCondition
	2,  // 10: zte.telemetry.FilterCondition.op_type:type_name -> zte.telemetry.ThresholdOpType
	7,  // 11: zte.telemetry.FilterCondition.threshold_op_value:type_name -> zte.telemetry.TypedValue
	7,  // 12: zte.telemetry.FilterCondition.op_value:type_name -> zte.telemetry.TypedValue
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_zte_telemetry_zte_telemetry_proto_init() }
func file_zte_telemetry_zte_telemetry_proto_init() {
	if File_zte_telemetry_zte_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zte_telemetry_zte_telemetry_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zte_telemetry_zte_telemetry_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NotificationGpb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zte_telemetry_zte_telemetry_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*NotificationGpbKv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zte_telemetry_zte_telemetry_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zte_telemetry_zte_telemetry_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TypedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zte_telemetry_zte_telemetry_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SelfDefinedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zte_telemetry_zte_telemetry_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SelfDefinedFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zte_telemetry_zte_telemetry_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FilterCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zte_telemetry_zte_telemetry_proto_msgTypes[4].OneofWrappers = []any{
		(*TypedValue_StringVal)(nil),
		(*TypedValue_Int64Val)(nil),
		(*TypedValue_Uint64Val)(nil),
		(*TypedValue_Int32Val)(nil),
		(*TypedValue_Uint32Val)(nil),
		(*TypedValue_FloatVal)(nil),
		(*TypedValue_DoubleVal)(nil),
		(*TypedValue_BytesVal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zte_telemetry_zte_telemetry_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zte_telemetry_zte_telemetry_proto_goTypes,
		DependencyIndexes: file_zte_telemetry_zte_telemetry_proto_depIdxs,
		EnumInfos:         file_zte_telemetry_zte_telemetry_proto_enumTypes,
		MessageInfos:      file_zte_telemetry_zte_telemetry_proto_msgTypes,
	}.Build()
	File_zte_telemetry_zte_telemetry_proto = out.File
	file_zte_telemetry_zte_telemetry_proto_rawDesc = nil
	file_zte_telemetry_zte_telemetry_proto_goTypes = nil
	file_zte_telemetry_zte_telemetry_proto_depIdxs = nil
}
