version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: telemetry-postgres
    environment:
      POSTGRES_DB: telemetrydb
      POSTGRES_USER: telemetry_app
      POSTGRES_PASSWORD: SecurePassword123!
      TIMESCALEDB_TELEMETRY: off
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    command: >
      postgres
      -c shared_buffers=256MB
      -c max_connections=300
      -c effective_cache_size=1GB
      -c work_mem=16MB
      -c maintenance_work_mem=256MB
      -c wal_buffers=16MB
      -c checkpoint_completion_target=0.9
      -c log_min_duration_statement=1000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telemetry_app -d telemetrydb"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - telemetry-network

  telemetry:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: telemetry-app
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "50051:50051"   # gRPC端口
      - "12112:12112"   # Prometheus指标端口
      - "8080:8080"     # 健康检查端口
    volumes:
      - ./logs:/var/log/telemetry
      - ./config/docker-config.yaml:/app/config.yaml:ro
    environment:
      - TZ=Asia/Shanghai
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - telemetry-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  prometheus:
    image: prom/prometheus:latest
    container_name: telemetry-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - telemetry-network
    depends_on:
      - telemetry

  grafana:
    image: grafana/grafana:latest
    container_name: telemetry-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000
    restart: unless-stopped
    networks:
      - telemetry-network
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:latest
    container_name: telemetry-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - telemetry-network

  redis:
    image: redis:7-alpine
    container_name: telemetry-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - telemetry-network

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  redis_data:
    driver: local

networks:
  telemetry-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16